<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: R | 零露漙兮]]></title>
  <link href="http://luoyulong.github.io/blog/categories/r/atom.xml" rel="self"/>
  <link href="http://luoyulong.github.io/"/>
  <updated>2014-07-06T11:30:36+08:00</updated>
  <id>http://luoyulong.github.io/</id>
  <author>
    <name><![CDATA[luoyulong]]></name>
    <email><![CDATA[luoyulong@ncic.ac.cn]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[R 二维点图的绘画]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/06/r-dotchart/"/>
    <updated>2014-07-06T10:34:47+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/06/r-dotchart</id>
    <content type="html"><![CDATA[<p>对于一个具有二维属性，一维结果的数据库，想把它表现成二维点图的形式，我们可以使用plot函数来绘画，其中使用X，Y两个维度来表示其属性，通过点的颜色，大小来表示其结果</p>

<ol>
<li>首先，我们先根据其结果值，生成相应的颜色代码，这里我们通过颜色的深浅来表示值的大小，颜色越深，值越大：
``` r

<h1>function GetRBG convert value to a color number</h1>

<p>GetRGB &lt;&ndash; function(val)
{
maxval &lt;&ndash; max(val)
col &lt;&ndash; rgb(1-(val/maxval)<sup>4</sup>,1-(val/maxval)<sup>4</sup>,1-(val/maxval)<sup>4</sup>)
return (col)
}
```</p></li>
<li>其次，我们使用plot绘画二维点图
``` r

<h1>some preprocess</h1>

<p>result$x &lt;&ndash; unlist(lapply(result$OptConfig, function(x) GetNumberFromStr(x, 2)))
result$y &lt;&ndash; unlist(lapply(result$OptConfig, function(x) GetNumberFromStr(x, 3)))</p></li>
</ol>


<h1>achieve the color for value vector</h1>

<p>result$col &lt;&ndash; result$Gflops</p>

<h1>using function plot</h1>

<p>plot(result$x, result$y, ylim=c(0,max(result$y)), xlim=c(0, max(result$x)), pch=18, col=GetRGB(result$col), type=&ldquo;p&rdquo;, xlab=&ldquo;X&rdquo;, ylab=&ldquo;Y&rdquo;, cex=0.7)
<code>
![图片貌似出错啦](https://raw.githubusercontent.com/luoyulong/luoyulong.github.io/source/source/_posts/image/plot_example.jpeg)
3. 对于重要的点，使用point进行飘红强调
</code> r</p>

<h1>achieve the first 100 results</h1>

<p>bestresult &lt;&ndash; result[1:100, ]</p>

<h1>paint the 100 results using red</h1>

<p>points(bestresult$x, bestresult$y, pch=19, col=&ldquo;red&rdquo;, type=&ldquo;p&rdquo; ,cex=0.7) <br/>
```
<img src="https://raw.githubusercontent.com/luoyulong/luoyulong.github.io/source/source/_posts/image/point_red.jpeg" alt="图片貌似出错啦" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R 字符操作函数]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/24/r-string-manipulate/"/>
    <updated>2014-06-24T09:20:29+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/24/r-string-manipulate</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th> 函数     </th>
<th>   描述    </th>
</tr>
</thead>
<tbody>
<tr>
<td>nchar(x)  </td>
<td> 计算x中的字符数量</td>
</tr>
<tr>
<td>substr(x, start, stop)</td>
<td>   字符串截取 </td>
</tr>
<tr>
<td>grep(pattern, x)   </td>
<td>  字符串内的查找 </td>
</tr>
<tr>
<td>paste(&hellip;, sep = &ldquo; &rdquo;, collapse = NULL)</td>
<td>字符串连接</td>
</tr>
<tr>
<td>strsplit(x, split)</td>
<td>字符串分割</td>
</tr>
<tr>
<td>tolower() </td>
<td> 把x变成小写</td>
</tr>
<tr>
<td>toupper(x)</td>
<td>把x变成大写</td>
</tr>
<tr>
<td>casefold(x, upper = FALSE)</td>
<td>通过指定upper,把x变成大写或者小写</td>
</tr>
<tr>
<td>chartr(old, new, x)</td>
<td>把x中每个在old中出现的字符翻译成new中相应位置的字符 </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言 使用循环构建dataframe]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/23/raddcolumnbyloop/"/>
    <updated>2014-06-23T15:31:06+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/23/raddcolumnbyloop</id>
    <content type="html"><![CDATA[<ul>
<li>目前有个模块需要动态的确定dataframe的属性和值，属性和值以key=value的形式存在一个str 的list中，使用如下函数循环构建dataframe</li>
</ul>


<p>```
 for(item in dataItems)
  {</p>

<pre><code>itempair &lt;- unlist(strsplit(item, "="))
eval(parse(text=sprintf("%s=itempair[2]",itempair[1])))
if(datadf_str!="")
  datadf_str=paste(datadf_str,itempair[1],sep=",")
else
  datadf_str=itempair[1]
print(datadf_str)
</code></pre>

<p>  }
  datadf=eval(parse(text=sprintf(&ldquo;data.frame(%s)&rdquo;,datadf_str)))
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言 变量]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/19/r-language-variable/"/>
    <updated>2014-06-19T09:54:51+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/19/r-language-variable</id>
    <content type="html"><![CDATA[<h2>对全局变量的赋值</h2>

<ol>
<li> 在函数外部：

<ul>
<li>global_variable&lt;-newvalue</li>
<li>global_variable=newvalue</li>
</ul>
</li>
<li> 在函数内部：

<ul>
<li>global_variable&lt;&lt;-newvalue</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言 行与列的操作]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/19/r-hangg-yu-lie-de-cao-zuo/"/>
    <updated>2014-06-19T09:43:53+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/19/r-hangg-yu-lie-de-cao-zuo</id>
    <content type="html"><![CDATA[<h2>选择列</h2>

<h3>数据框/dataframe:</h3>

<h4>引用：</h4>

<ul>
<li>dn、d[,n]、d"name"、d[,&ldquo;name&rdquo;]、d$name 得到某一列组成的矢量。</li>
<li>d[n]、d[&ldquo;name&rdquo;] 得到某一列组成的数据框。</li>
<li>d[c(m,n,&hellip;)]、d[,c(m,n,&hellip;)]、d[,c(&ldquo;name1&rdquo;,&ldquo;name2&rdquo;,&hellip;)]得到若干列组成的数据框。

<h4>其它技巧：</h4></li>
<li>负号表示剔除。
<code>
allnames=names(rawdata)
vnames=c("OptType","OptConfig","Gflops")
vnames2=allnames %in% vnames
snames=allnames[!vnames2]
</code></li>
<li>可以用 grep() 搜索变量名。比如
<code>mydata[grep("^q", names(mydata))]</code>
选择名称以“q”开头的数据列。</li>
</ul>


<h3>列表/List：</h3>

<h4>list列的引用</h4>

<ul>
<li>d[[&ldquo;colname&rdquo;]] 得到成分名为colname的列矢量</li>
</ul>


<h2>选择行</h2>

<h3>数据框：</h3>

<h4>引用：</h4>

<ul>
<li>d[n,] 得到某一行组成的数据框。</li>
<li>d[c(m,n,&hellip;),n] 得到若干行组成的数据框。</li>
<li>head() 得到前6行组成的数据框。</li>
<li>tail() 得到最后6行组成的数据框。</li>
</ul>


<h4>条件引用。例如：</h4>

<ul>
<li>d[d$y>8,] 得到d中满足y>8的行组成的数据框。</li>
<li>d$x[d$y>8] 得到d中满足y>8的行的列x组成的矢量。</li>
</ul>


<h4>数据框行的遍历</h4>

<ul>
<li>使用索引进行遍历
<code>
for(i in 1:nrow(rawdata))
dosomething(rawdata[i,])
</code></li>
</ul>

]]></content>
  </entry>
  
</feed>
