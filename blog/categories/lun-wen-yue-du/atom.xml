<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 论文阅读 | 零露漙兮]]></title>
  <link href="http://luoyulong.github.io/blog/categories/lun-wen-yue-du/atom.xml" rel="self"/>
  <link href="http://luoyulong.github.io/"/>
  <updated>2014-06-19T17:36:02+08:00</updated>
  <id>http://luoyulong.github.io/</id>
  <author>
    <name><![CDATA[luoyulong]]></name>
    <email><![CDATA[luoyulong@ncic.ac.cn]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[“A Stencil Compiler for Short-Vector SIMD Architectures”论文阅读]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/19/reading2/"/>
    <updated>2014-06-19T17:25:41+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/19/reading2</id>
    <content type="html"><![CDATA[<ul>
<li><p>领域中抽象出特有的语义属性，非常利于优化</p>

<blockquote><p>a significant advantage is that semantic properties derived from the high-level abstractions can be utilized to develop powerful special- ized compiler transformations that can be tailored to the character- istics of different architectural platforms.</p></blockquote></li>
<li><p><strong>DLT优化</strong>
<img src="./1403018072433.png" alt="Alt text" /></p></li>
<li><p><strong>时间tiling优化</strong>：figure3中可以看到，对于unskew的stencil空间，基于时间的分块划分的tiles是一个平行四边形，平行四边形内部具有依赖关系（以及局部性），需要串行执行；平行四边形之间也存在依赖。</p></li>
<li><p><strong>同时使用DLT和Tiling的问题</strong>：DLT会把一些空间上分散的数组元素放入一个向量使用simd执行，这要求这些分散的数据能够并行执行(例如数组元素B[0],B[6],B[12],B[18])。但是显然，通常的<em>时间分块方法无法保证块在水平方向能够并行</em>。</p></li>
<li><p><strong>标准分块和分割-分块</strong></p>

<blockquote><p>DLT <strong>causes spatially separated data elements</strong> (for example, B[0], B[6], B[12], B[18] in Fig. (1)) to be gathered together in a single vector and therefore must be operated upon concurrently
<img src="./1403055017350.png" alt="Alt text" />
<strong>说明</strong>：y轴表示了变化的时间步，x轴是一维的stencil空间。图a、b中的<em>平行四边形和梯形</em>表示使用不同tiling方案划分得到的tile，每个tile包含了stenc il空间的一个子集，而其中的<em>圆圈</em>表示所在tile执行的顺序</p></blockquote></li>
<li><p>解决方法：使用分割-分块法把stencil时空划分成两类tiles.在时间方向上得依赖不变，但所有的正梯形(unright)可以在水平上并行执行，而倒梯形虽然依赖于水平方向相邻的两个梯形，但在正梯形执行完后，所有的倒梯形也可以并行执行。 所以，通过合适的分块尺寸，把应该在一个向量内的所有元素划分入相同类型的矩形内即可实现两种优化的并存。</p>

<blockquote><p>shows a different form of tiling – split-tiles. Here, up- right and inverted tiles alternate and the inter-tile dependences are only from an upright tile to its two neighboring inverted tiles. As a result, concurrent execution of all upright tiles over a given time range is feasible, followed by concurrent execution of the inverted tiles over the same time range. Again, the circled values within the tiles indicate the sequence of execution of the tiles, where tiles with the same sequence number can be executed concurrently. With such a tiling strategy, it is now feasible to use DLT, as long as all data elements grouped into each vector are all within upright tiles or all within inverted tiles. Further, unlike execution required with standard tiling, the schedule for parallel tile execution with split- tiles is fully load balanced and does not have a sequential start and gradual build up of inter-tile parallelism as required for wavefront- parallel standard tiling.</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Split Tiling for GPUs: Automatic Parallelization Using Trapezoidal Tiles"论文阅读]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/19/reading/"/>
    <updated>2014-06-19T17:16:08+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/19/reading</id>
    <content type="html"><![CDATA[<h2>算法描述</h2>

<ol>
<li>首先使用多个等距离、平行于时间轴的超平面划分迭代空间为时间带"time band"

<blockquote><p>As a first step, we partition the iteration space by placing equally distanced hyperplanes orthogonal to the axis of the time dimension.</p></blockquote></li>
<li>在每个<em>time band</em>中构建金字塔，每个金字塔是一个可以并行计算点得集合</li>
<li>在空间任选一个顶点X,X是某个金字塔的顶点，而金字塔包含了在“time band”中所有计算X所依赖的点</li>
<li>沿着时间轴推进，把X的所有依赖点加入金字塔</li>
<li>扩展该金字塔

<ol>
<li> 为了使得金字塔变宽，首先选取一个需要扩展的方向D</li>
<li> 在该方向上，复制金字塔中点，这些点所有非D方向的坐标保持不变，而D方向的坐标进行扩展</li>
<li> 除了在一个维度扩展，还可以对多个维度的组合进行扩展

<blockquote><p>In addition to the first color, we derive one color for each space dimension in the input. The shape of a color Cx (where x corre- sponds to some space dimension) is derived by stretching the pyra- mid of C0 along the x-dimension and by subsequently subtracting the shapes of all previously calculated colors.
In the case of more than one space dimension, additional colors are needed. Besides the initial color C0 and the colors for indi- vidual dimensions, we introduce a color for each combination of dimensions. This means, for a 3D input, the colors Cxy, Cxz, Cyz as well as Cxyz are introduced.</p></blockquote></li>
</ol>
</li>
<li>使用金字塔去划分每个”time band“为多个颜色的tiles，每种颜色的tiles在相同的“time band”内可以并行执行</li>
</ol>

]]></content>
  </entry>
  
</feed>
