<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[零露漙兮]]></title>
  <link href="http://luoyulong.github.io/atom.xml" rel="self"/>
  <link href="http://luoyulong.github.io/"/>
  <updated>2014-07-06T11:31:48+08:00</updated>
  <id>http://luoyulong.github.io/</id>
  <author>
    <name><![CDATA[luoyulong]]></name>
    <email><![CDATA[luoyulong@ncic.ac.cn]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[R 二维点图的绘画]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/06/r-dotchart/"/>
    <updated>2014-07-06T10:34:47+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/06/r-dotchart</id>
    <content type="html"><![CDATA[<p>对于一个具有二维属性，一维结果的数据库，想把它表现成二维点图的形式，我们可以使用plot函数来绘画，其中使用X，Y两个维度来表示其属性，通过点的颜色，大小来表示其结果</p>

<ol>
<li>首先，我们先根据其结果值，生成相应的颜色代码，这里我们通过颜色的深浅来表示值的大小，颜色越深，值越大：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1">#function GetRBG convert value to a color number  </span>
</span><span class='line'>GetRGB <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>val<span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  maxval <span class="o">&lt;-</span> max<span class="p">(</span>val<span class="p">)</span>
</span><span class='line'>  col <span class="o">&lt;-</span> rgb<span class="p">(</span><span class="m">1</span><span class="o">-</span><span class="p">(</span>val<span class="o">/</span>maxval<span class="p">)</span><span class="o">^</span><span class="m">4</span><span class="p">,</span><span class="m">1</span><span class="o">-</span><span class="p">(</span>val<span class="o">/</span>maxval<span class="p">)</span><span class="o">^</span><span class="m">4</span><span class="p">,</span><span class="m">1</span><span class="o">-</span><span class="p">(</span>val<span class="o">/</span>maxval<span class="p">)</span><span class="o">^</span><span class="m">4</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">return</span> <span class="p">(</span>col<span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
2.  其次，我们使用plot绘画二维点图</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1">#some preprocess</span>
</span><span class='line'>result<span class="o">$</span>x <span class="o">&lt;-</span> unlist<span class="p">(</span>lapply<span class="p">(</span>result<span class="o">$</span>OptConfig<span class="p">,</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">)</span> GetNumberFromStr<span class="p">(</span>x<span class="p">,</span> <span class="m">2</span><span class="p">)))</span>
</span><span class='line'>result<span class="o">$</span>y <span class="o">&lt;-</span> unlist<span class="p">(</span>lapply<span class="p">(</span>result<span class="o">$</span>OptConfig<span class="p">,</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">)</span> GetNumberFromStr<span class="p">(</span>x<span class="p">,</span> <span class="m">3</span><span class="p">)))</span>
</span><span class='line'><span class="c1">#achieve the color for value vector</span>
</span><span class='line'>result<span class="o">$</span>col <span class="o">&lt;-</span> result<span class="o">$</span>Gflops
</span><span class='line'><span class="c1">#using function plot </span>
</span><span class='line'>plot<span class="p">(</span>result<span class="o">$</span>x<span class="p">,</span> result<span class="o">$</span>y<span class="p">,</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span>max<span class="p">(</span>result<span class="o">$</span>y<span class="p">)),</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span> max<span class="p">(</span>result<span class="o">$</span>x<span class="p">)),</span> pch<span class="o">=</span><span class="m">18</span><span class="p">,</span> col<span class="o">=</span>GetRGB<span class="p">(</span>result<span class="o">$</span>col<span class="p">),</span> type<span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;X&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;Y&quot;</span><span class="p">,</span> cex<span class="o">=</span><span class="m">0.7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://raw.githubusercontent.com/luoyulong/luoyulong.github.io/source/source/_posts/image/plot_example.jpeg" alt="图片貌似出错啦" /></p>

<ol>
<li>对于重要的点，使用point进行飘红强调</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1">#achieve the first 100 results</span>
</span><span class='line'>bestresult <span class="o">&lt;-</span> result<span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">100</span><span class="p">,</span> <span class="p">]</span>
</span><span class='line'><span class="c1">#paint the 100 results using red</span>
</span><span class='line'>points<span class="p">(</span>bestresult<span class="o">$</span>x<span class="p">,</span> bestresult<span class="o">$</span>y<span class="p">,</span> pch<span class="o">=</span><span class="m">19</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> type<span class="o">=</span><span class="s">&quot;p&quot;</span> <span class="p">,</span>cex<span class="o">=</span><span class="m">0.7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://raw.githubusercontent.com/luoyulong/luoyulong.github.io/source/source/_posts/image/point_red.jpeg" alt="图片貌似出错啦" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CUDA 优化经验]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/03/gpuexperiences/"/>
    <updated>2014-07-03T17:45:10+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/03/gpuexperiences</id>
    <content type="html"><![CDATA[<h1>硬件模型</h1>

<ol>
<li><p>shared-memoy在硬件层是以SM为单位，在逻辑层是以block为单位</p></li>
<li><p>warp是GPU在硬件层的并行单位。一般来说，warp等于32. SM在处理一个block kernel时，会经可能多的发射warp，每个warp内线程的大小为32.</p></li>
<li><p><span id="anchor1"></span>每个SM可以同时驻留多个 block执行（active block），这主要取决于当前SM是否拥有足够的硬件资源，如Register，shared-memory等等.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p></li>
<li><p>在200机器上的GPU，每个SM拥有256*256个32位的寄存器（即平均每个线程有256个32-bite的寄存器），49152byte的shared memory,65536byte的constant memory。</p></li>
</ol>


<h1>优化原则</h1>

<ol>
<li><p>把部分无共享的shared-memory变为global memory， 并没有增加速度，推测是因为对shared-memory减少的还不够 不足以使得同时在SM运行的block增加。（已经验证）</p></li>
<li><p>有些常量经常被用到，且占用的空间很小。之前使用常量存储器，现改用参数传递，放入寄存器进行加速。</p></li>
<li><p>把与threadIdx无关的公共计算提到host端计算，再把结果使用参数传递给kernel函数</p></li>
<li><p>写回的变量不使用shared-memory</p></li>
<li><p>shared-memory和分块大小之间有一个<a href="#anchor1">tradeoff</a>，即越多的shared-memory会导致在同一SM上驻留的block减少，但同时其访存的性能会上升</p></li>
<li><p>除法非常耗时，如果精度允许的话，使用被除数的倒数组成乘法替换除法。</p></li>
<li><p>GPU适合小而多的运算，对于复杂运算（例如许多除法，大尺寸工作集），CPU反而占据性能优势</p></li>
</ol>


<h1>CUDA手册:性能优化</h1>

<p>Performance optimization revolves around three basic strategies:<em> Maximize parallel execution to achieve maximum utilization;</em> Optimize memory usage to achieve maximum memory throughput;* Optimize instruction usage to achieve maximum instruction throughput</p>

<h2>Maximize Utilization</h2>

<p>XXXX###Application Level
XXXX###Device Level
1. For devices of compute capability 1.x, only one kernel can execute on a device at one time, so the kernel should be launched with at least <strong>as many thread blocks as</strong> there are multiprocessors in the device.2. For devices of compute capability 2.x and higher, multiple kernels can <strong>execute concurrently</strong> on a device, so maximum utilization can also be achieved by using streams to enable enough kernels to execute concurrently as described in Asynchronous Concurrent Execution.</p>

<h3>Multiprocessor Level</h3>

<p>XXXX</p>

<h2>Maximize Memory Throughput</h2>

<p>XXXX</p>

<h3>Device Memory Accesses</h3>

<p>XXXX</p>

<h4>Shared Memory<em> xxxx</em> Because it is on-chip, shared memory has much higher bandwidth and much lower latency than local or global memory.To achieve high bandwidth, shared memory is divided into equally-sized memory modules, called banks, which can be accessed simultaneously. Any memory read or write request made of n addresses that fall in n distinct memory banks can therefore be serviced simultaneously, yielding an overall bandwidth that is n times as high as the bandwidth of a single module.</h4>

<ul>
<li>However, if two addresses of a memory request fall in the same memory bank, there is a <strong>bank conflict</strong> and the access has to be serialized. The hardware splits a memory request with bank conflicts into as many separate conflict-free requests as necessary, decreasing throughput by a factor equal to the number of separate memory requests. If the number of separate memory requests is n, the initial memory request is said to cause n-way bank conflicts.</li>
<li>To get maximum performance, it is therefore important to understand how memory addresses map to memory banks in order to schedule the memory requests so as to minimize bank conflicts. This is described in Compute Capability 1.x,Compute Capability 2.x, Compute Capability 3.x, and Compute Capability 5.0 for devices of compute capability 1.x, 2.x, 3.x, and 5.0, respectively.</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>详见http://stackoverflow.com/questions/12212003/how-concurrent-blocks-can-run-a-single-gpu-streaming-multiprocessor/12213137#12213137<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[论文写作经验]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/03/paperwritting/"/>
    <updated>2014-07-03T09:28:32+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/03/paperwritting</id>
    <content type="html"><![CDATA[<h2>对reviewer的误区</h2>

<h3>Reviewers will carefully read my paper ? <strong>Totally wrong!</strong></h3>

<ul>
<li>A reviewer often has a pile of papers to review</li>
<li>A reviewer typically makes up his/her mind after 5-minute browsing <strong><em>title/author->abstract->conclusions->references &ndash;>introduction</em></strong>, then spends &lt; 1h to justify (moving to main body of the paper)</li>
</ul>


<h3>Your action:</h3>

<ul>
<li>make your points <strong><em>EARLY</em></strong></li>
<li>bring up your results <strong><em>QUICK</em></strong></li>
<li>highlight your contributions <strong><em>FAST</em></strong></li>
<li>make your paper easy to read, clear to follow, and good to learn</li>
</ul>


<h2>Component of a paper</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[英语写作 句子]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/02/englishwriting/"/>
    <updated>2014-07-02T21:57:54+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/02/englishwriting</id>
    <content type="html"><![CDATA[<h1>句子</h1>

<ul>
<li>xxxx,to the best of our knowledge,not been previously studied and is now more compelling than ever</li>
<li>While a large body of work exists on DRAM in laboratory conditions, little has been reported on real DRAM failures in large production clusters.</li>
<li>with extremely low energy footprints, all within acceptable area bounds
Failures are costly in terms of &hellip;</li>
<li>To our knowledge, these are the first performance results of a shortest path problem on realistic graph instances in the order of billions of vertices and edges.[1]</li>
<li>In this work, our focus is to attack the dual problems of increasing power consumption and latency for DRAM devices</li>
<li>These observations have the potential to open up new avenues for architecture research.</li>
<li>In terms of xxx &mdash;&ndash; 对于xxx方面</li>
<li>To the best of our knowledge this is the first proposed scheme that &hellip;
reads have no option but to wait at the memory controller.</li>
<li>Guard against forgetting &mdash;-防止XXXX</li>
<li>reason about &mdash;-推出</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CUDA 计时的方法]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/02/cuda-timing/"/>
    <updated>2014-07-02T15:04:09+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/02/cuda-timing</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>测试CUDA应用的时间</p>

<h1>解决方案</h1>

<p>引用自stackoverflow：</p>

<blockquote><p>You could do sth along the lines of :</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cuda'><span class='line'><span class="cp">#include&lt;sys/time.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">timeval</span> <span class="n">t1</span><span class="p">,</span> <span class="n">t2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">kernel_call</span><span class="o">&lt;&lt;&lt;</span><span class="n">dimGrid</span><span class="p">,</span> <span class="n">dimBlock</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">gpuErrchk</span><span class="p">(</span><span class="n">cudaThreadSynchronize</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="n">time</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1000000.0</span><span class="o">*</span><span class="p">(</span><span class="n">t2</span><span class="p">.</span><span class="n">tv_sec</span><span class="o">-</span><span class="n">t1</span><span class="p">.</span><span class="n">tv_sec</span><span class="p">)</span> <span class="o">+</span> <span class="n">t2</span><span class="p">.</span><span class="n">tv_usec</span><span class="o">-</span><span class="n">t1</span><span class="p">.</span><span class="n">tv_usec</span><span class="p">)</span><span class="o">/</span><span class="mf">1000000.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Time to generate:  %3.1f ms </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>or:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cuda'><span class='line'><span class="kt">float</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'><span class="n">cudaEvent_t</span> <span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gpuErrchk</span><span class="p">(</span> <span class="n">cudaEventCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">start</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">gpuErrchk</span><span class="p">(</span> <span class="n">cudaEventCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stop</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">gpuErrchk</span><span class="p">(</span> <span class="n">cudaEventRecord</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">kernel_call</span><span class="o">&lt;&lt;&lt;</span><span class="n">dimGrid</span><span class="p">,</span> <span class="n">dimBlock</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">gpuErrchk</span><span class="p">(</span> <span class="n">cudaEventRecord</span><span class="p">(</span><span class="n">stop</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">gpuErrchk</span><span class="p">(</span> <span class="n">cudaEventSynchronize</span><span class="p">(</span><span class="n">stop</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">gpuErrchk</span><span class="p">(</span> <span class="n">cudaEventElapsedTime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">time</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Time to generate:  %3.1f ms </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，在cpu端计时，由于GPU的kenernl与cpu是异步执行，所以在获得整个cuda应用的结束时间前，必须要调用cudaThreadSynchronize（现替换成cudaDeviceSynchronize），否则测的时间是最后一个kernel 启动的时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROSE 在源文件的include语句之前插入语句]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/01/rose-insertstatementbeforeheader/"/>
    <updated>2014-07-01T11:50:40+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/01/rose-insertstatementbeforeheader</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>今天，在使用ROSE自动生成CUDA代码时，遇到一个问题：程序中需要使用纹理存储器对GPU访存进行加速，相应地要生成texture变量声明的代码。由于texture初始化时使用到一个宏，该宏定义在文件头部，这就使得texture的初始化必须在宏定义之后。翻遍了手册，找不到把语句插入preprocessinfo 结点（include，#define ）之后的方法，于是退一步打算找到当前scope中第一个语句，然后插到该语句之后。本打算调用firststatement的方法，报错，并且scope中的statement并不全是源码中的语句，会包含一些头文件中的结点。</p>

<h1>解决方法</h1>

<p>通过比较scope和scope中语句的名字，找到当前源文件中第一个SgStatement</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'> <span class="c1">//find the first statement of current source file</span>
</span><span class='line'>  <span class="n">SgStatement</span><span class="o">*</span> <span class="n">firststatement</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SgStatementPtrList</span> <span class="n">statelist</span><span class="o">=</span><span class="n">currentscope</span><span class="o">-&gt;</span><span class="n">generateStatementList</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">statelist</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="n">SgStatement</span><span class="o">*</span> <span class="n">tmp</span><span class="o">=</span><span class="n">statelist</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">get_file_info</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">get_filenameString</span><span class="p">()</span><span class="o">==</span><span class="n">currentscope</span><span class="o">-&gt;</span><span class="n">get_file_info</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">get_filenameString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="n">firststatement</span><span class="o">=</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>                                                                     <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[检测Linux下 ODBC是否配置成功]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/30/linuxodbc/"/>
    <updated>2014-06-30T21:48:21+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/30/linuxodbc</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>测试ODBC安装是否成功</p>

<h1>解决方案</h1>

<p>使用isql测试数据源是否配置正确</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># dbname:the username of target database</span>
</span><span class='line'><span class="c"># dbpsw: the password of target database</span>
</span><span class='line'>imysql -v datasourcename dbname dbpsw
</span></code></pre></td></tr></table></div></figure>


<p>如果数据源配置正确，会出现进入数据库</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROSE 编程要点]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/30/roseimportant/"/>
    <updated>2014-06-30T15:10:56+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/30/roseimportant</id>
    <content type="html"><![CDATA[<ul>
<li>SgName的输出要使用getString方法，而不能使用unparseToCompleteString</li>
<li>在创建AST node变量时，子节点要使用deepCopy进行深度拷贝，防止一个node在语法树中被多次引用；若在编程中不小心出现这种情况，可以通过打印dot图观察依赖关系，从而找到修改被多次引用的node。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROSE 声明CUDA类型的变量]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/30/rose-cuda-varialbe/"/>
    <updated>2014-06-30T10:26:12+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/30/rose-cuda-varialbe</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>需要声明CUDA类型的变量，如 constant,device,shared等等</p>

<h1>解决方案</h1>

<p>调用<code>get_declarationModifier().get_storageModifier().set</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROSE 创建模板类变量的一个取巧办法]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/30/rose-create-template-variable/"/>
    <updated>2014-06-30T09:42:36+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/30/rose-create-template-variable</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>用ROSE产生cuda代码时，为了性能需要，使用到了纹理存储器。但在纹理存储器变量声明的时候，遇到了点问题：纹理寄存器变量的类型是模板类实例，e.g,<code>texture&lt;DATATYPE,1,cudaReadModeElementType&gt; t_a</code>,但是rose中模板类变量貌似不怎么好声明，尝试了半天都没有成功。</p>

<h1>解决方案</h1>

<p>使用万金油式的buildOpaqueType直接创建模板类型,然后使用该类型创建纹理存储器变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//create a template instance type directly: texture&lt;DATATYPE,1,cudaReadModelElementType&gt;</span>
</span><span class='line'><span class="n">SgType</span><span class="o">*</span> <span class="n">textureType</span><span class="o">=</span><span class="n">buildOpaqueType</span><span class="p">(</span><span class="s">&quot;texture&lt;DATATYPE,1,cudaReadModelElementType&gt;&quot;</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">get_scope</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//create the texture type variable &quot;texture_a&quot;</span>
</span><span class='line'><span class="n">SgVariableDeclaration</span><span class="o">*</span> <span class="n">vdecl</span><span class="o">=</span><span class="n">buildVariableDeclaration</span><span class="p">(</span><span class="s">&quot;texture_a&quot;</span><span class="p">,</span><span class="n">textureType</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">get_scope</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[error: no instance of overloaded function "tex1Dfetch" matches the argument list argument types are: (texture<double, 1, cudaReadModeElementType>, int)  ]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/29/cudatexture/"/>
    <updated>2014-06-29T15:59:52+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/29/cudatexture</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>在使用cuda的纹理存储器时，编译器报错</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>stencilexample.cu<span class="o">(</span>147<span class="o">)</span>: error:
</span><span class='line'>no instance of overloaded <span class="k">function</span> <span class="s2">&quot;tex1Dfetch&quot;</span>
</span><span class='line'>matches the argument list argument types are:
</span><span class='line'><span class="o">(</span>texture&lt;double, 1, cudaReadModeElementType&gt;, int<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>解决方法</h1>

<p>经过研究，发现原来cuda的纹理存储器不能直接支持double</p>

<blockquote><p>The type of a texel, which is restricted to the basic integer and single-precision floating-point types and any of the 1-, 2-, and 4-component vector types defined in char, short, int, long, longlong, float, double that are derived from the basic integer and single-precision floating-point types.
出处：<a href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#texture-and-surface-memory" title="Title">cuda-c-programming-guide</a></p></blockquote>

<p>非要加速的话，可以使用一个int2类型的向量拼接成一个double</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cuda'><span class='line'><span class="c1">//declarate the texture using int2 type</span>
</span><span class='line'><span class="n">texture</span> <span class="o">&lt;</span><span class="kt">int2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">cudaReadModeElementType</span><span class="o">&gt;</span> <span class="n">Atex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//used in global function(cuda kernel)</span>
</span><span class='line'><span class="kt">int2</span> <span class="n">A1</span><span class="o">=</span><span class="n">tex1Dfetch</span><span class="p">(</span><span class="n">Atex</span><span class="p">,(</span><span class="n">texoff</span><span class="o">+</span><span class="p">(</span><span class="n">ll</span><span class="o">+</span><span class="n">offset</span><span class="p">)</span> <span class="o">*</span><span class="n">lda</span> <span class="o">+</span><span class="n">ty</span><span class="o">+</span><span class="n">offset</span><span class="p">));</span>
</span><span class='line'><span class="n">Bs</span><span class="p">[</span><span class="n">ty</span><span class="o">+</span><span class="n">offset</span><span class="p">][</span><span class="n">tx</span><span class="p">]</span> <span class="o">-=</span> <span class="n">__hiloint2double</span><span class="p">(</span><span class="n">A1</span><span class="p">.</span><span class="n">y</span><span class="p">,</span><span class="n">A1</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">temp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R 字符操作函数]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/24/r-string-manipulate/"/>
    <updated>2014-06-24T09:20:29+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/24/r-string-manipulate</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th> 函数     </th>
<th>   描述    </th>
</tr>
</thead>
<tbody>
<tr>
<td>nchar(x)  </td>
<td> 计算x中的字符数量</td>
</tr>
<tr>
<td>substr(x, start, stop)</td>
<td>   字符串截取 </td>
</tr>
<tr>
<td>grep(pattern, x)   </td>
<td>  字符串内的查找 </td>
</tr>
<tr>
<td>paste(&hellip;, sep = &ldquo; &rdquo;, collapse = NULL)</td>
<td>字符串连接</td>
</tr>
<tr>
<td>strsplit(x, split)</td>
<td>字符串分割</td>
</tr>
<tr>
<td>tolower() </td>
<td> 把x变成小写</td>
</tr>
<tr>
<td>toupper(x)</td>
<td>把x变成大写</td>
</tr>
<tr>
<td>casefold(x, upper = FALSE)</td>
<td>通过指定upper,把x变成大写或者小写</td>
</tr>
<tr>
<td>chartr(old, new, x)</td>
<td>把x中每个在old中出现的字符翻译成new中相应位置的字符 </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言 使用循环构建dataframe]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/23/raddcolumnbyloop/"/>
    <updated>2014-06-23T15:31:06+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/23/raddcolumnbyloop</id>
    <content type="html"><![CDATA[<ul>
<li>目前有个模块需要动态的确定dataframe的属性和值，属性和值以key=value的形式存在一个str 的list中，使用如下函数循环构建dataframe</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> for(item in dataItems)
</span><span class='line'>  {
</span><span class='line'>    itempair &lt;- unlist(strsplit(item, "="))
</span><span class='line'>    eval(parse(text=sprintf("%s=itempair[2]",itempair[1])))
</span><span class='line'>    if(datadf_str!="")
</span><span class='line'>      datadf_str=paste(datadf_str,itempair[1],sep=",")
</span><span class='line'>    else
</span><span class='line'>      datadf_str=itempair[1]
</span><span class='line'>    print(datadf_str)
</span><span class='line'>  }
</span><span class='line'>  datadf=eval(parse(text=sprintf("data.frame(%s)",datadf_str)))</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言 变量]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/19/r-language-variable/"/>
    <updated>2014-06-19T09:54:51+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/19/r-language-variable</id>
    <content type="html"><![CDATA[<h2>对全局变量的赋值</h2>

<ol>
<li> 在函数外部：

<ul>
<li>global_variable&lt;-newvalue</li>
<li>global_variable=newvalue</li>
</ul>
</li>
<li> 在函数内部：

<ul>
<li>global_variable&lt;&lt;-newvalue</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言 行与列的操作]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/19/r-hangg-yu-lie-de-cao-zuo/"/>
    <updated>2014-06-19T09:43:53+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/19/r-hangg-yu-lie-de-cao-zuo</id>
    <content type="html"><![CDATA[<h2>选择列</h2>

<h3>数据框/dataframe:</h3>

<h4>引用：</h4>

<ul>
<li>dn、d[,n]、d&#8221;name&#8221;、d[,&ldquo;name&rdquo;]、d$name 得到某一列组成的矢量。</li>
<li>d[n]、d[&ldquo;name&rdquo;] 得到某一列组成的数据框。</li>
<li>d[c(m,n,&hellip;)]、d[,c(m,n,&hellip;)]、d[,c(&ldquo;name1&rdquo;,&ldquo;name2&rdquo;,&hellip;)]得到若干列组成的数据框。

<h4>其它技巧：</h4></li>
<li>负号表示剔除。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  allnames=names(rawdata)
</span><span class='line'>  vnames=c("OptType","OptConfig","Gflops")
</span><span class='line'>  vnames2=allnames %in% vnames
</span><span class='line'>  snames=allnames[!vnames2]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>可以用 grep() 搜索变量名。比如
<code>mydata[grep("^q", names(mydata))]</code>
选择名称以“q”开头的数据列。</li>
</ul>


<h3>列表/List：</h3>

<h4>list列的引用</h4>

<ul>
<li>d[[&ldquo;colname&rdquo;]] 得到成分名为colname的列矢量</li>
</ul>


<h2>选择行</h2>

<h3>数据框：</h3>

<h4>引用：</h4>

<ul>
<li>d[n,] 得到某一行组成的数据框。</li>
<li>d[c(m,n,&hellip;),n] 得到若干行组成的数据框。</li>
<li>head() 得到前6行组成的数据框。</li>
<li>tail() 得到最后6行组成的数据框。</li>
</ul>


<h4>条件引用。例如：</h4>

<ul>
<li>d[d$y>8,] 得到d中满足y>8的行组成的数据框。</li>
<li>d$x[d$y>8] 得到d中满足y>8的行的列x组成的矢量。</li>
</ul>


<h4>数据框行的遍历</h4>

<ul>
<li>使用索引进行遍历</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for(i in 1:nrow(rawdata))
</span><span class='line'>  dosomething(rawdata[i,])</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Rose Problem:  SgNode::get_numberOfTraversalSuccessors(): Assertion 'false' failed]]></title>
    <link href="http://luoyulong.github.io/blog/2014/03/30/roseproblem/"/>
    <updated>2014-03-30T21:30:45+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/03/30/roseproblem</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Internal error<span class="o">(</span>!<span class="o">)</span>: called tree traversal mechanism <span class="k">for </span>illegal object:
</span><span class='line'>static: SgNode
</span><span class='line'>dynamic:  SgNode
</span><span class='line'>Aborting ...
</span><span class='line'>my_program: Cxx_GrammarTreeTraversalSuccessorContainer.C:42: virtual
</span><span class='line'>size_t SgNode::get_numberOfTraversalSuccessors<span class="o">()</span>: Assertion <span class="sb">`</span><span class="nb">false</span><span class="err">&#39;</span> failed.
</span></code></pre></td></tr></table></div></figure>


<h2>解决方法</h2>

<p>这种错误一般是由于语法树具有环路造成的。造成环路的原因一般是因为一个astnode被多次使用，解决方法是利用deepcopy在多次使用的地方克隆。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Miktex+ Texmarker/Texstudio环境的配置  ]]></title>
    <link href="http://luoyulong.github.io/blog/2014/03/13/miktex-plus-texmarker-texstudio-enviroment-setup/"/>
    <updated>2014-03-13T10:37:02+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/03/13/miktex-plus-texmarker-texstudio-enviroment-setup</id>
    <content type="html"><![CDATA[<h2>步骤</h2>

<ul>
<li><p>下载miktex移植版本：
<a href="http://miktex.org/download">http://miktex.org/download</a></p></li>
<li><p>解压</p></li>
<li><p>设置系统环境变量PATH。例如：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PATH</span><span class="o">=</span>E:<span class="se">\P</span>rogram Files<span class="se">\m</span>iktex-portable<span class="se">\m</span>iktex<span class="se">\b</span>in
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装Texmarker/Texstudio，即可运行</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TAU 中的profile和trace]]></title>
    <link href="http://luoyulong.github.io/blog/2013/12/19/tau/"/>
    <updated>2013-12-19T20:51:00+08:00</updated>
    <id>http://luoyulong.github.io/blog/2013/12/19/tau</id>
    <content type="html"><![CDATA[<h2>预备知识</h2>

<ul>
<li><p>profile侧重结果，trace侧重过程。</p></li>
<li><p>对于两个不同类型的测试（profile or trace），需要指定不同的makefile文件，各类makefile文件在tau编译配置时根据参数指定生成。</p></li>
</ul>


<h2>自动化插桩的过程：</h2>

<ul>
<li><p>添加或者设需要的makefile</p></li>
<li><p>根据待插桩的源码，设置相应的tau编译器（可在makefile中替换或者直接使用tau编译器编译）</p></li>
</ul>


<h3>例子：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#设置tau makefile</span>
</span><span class='line'><span class="nb">export </span><span class="nv">TAU_MAKEFILE</span><span class="o">=</span>/home/xxxx/tools/tau_TRACE_PAPIWALLCLOCK/x86_64/lib/Makefile.tau-papi-pdt-trace
</span><span class='line'>
</span><span class='line'><span class="c">#设置插桩参数</span>
</span><span class='line'><span class="nb">export </span><span class="nv">TAU_THROTTLE</span><span class="o">=</span>0
</span><span class='line'><span class="nb">export </span><span class="nv">COUNTER1</span><span class="o">=</span>P_WALL_CLOCK_TIME
</span><span class='line'><span class="nb">export </span><span class="nv">COUNTER2</span><span class="o">=</span>PAPI_L1_DCM
</span><span class='line'><span class="nb">export </span><span class="nv">COUNTER3</span><span class="o">=</span>PAPI_FP_INS
</span><span class='line'>
</span><span class='line'><span class="c">#调用tau编译器</span>
</span><span class='line'>tau_f90.sh  -c  hps_em_comp.f90
</span><span class='line'>tau_cxx.sh  main.cpp  hps_em_comp.o -o mytest
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>此外，进一步的详细插桩可以通过在编译时指定配置文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tau_f90.sh -tau_options<span class="o">=</span>-optTauSelectFile<span class="o">=</span>ins_file -c  hps_em_comp.f90
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置文件格式如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#Tell tau to not profile these functions</span>
</span><span class='line'>BEGIN_EXCLUDE_LIST
</span><span class='line'>double* get<span class="o">(</span>int size<span class="o">)</span>
</span><span class='line'>END_EXCLUDE_LIST
</span><span class='line'>
</span><span class='line'><span class="c">#Exclude these files from profiling</span>
</span><span class='line'>
</span><span class='line'>BEGIN_FILE_EXCLUDE_LIST
</span><span class='line'>*.so
</span><span class='line'>END_FILE_EXCLUDE_LIST
</span><span class='line'>
</span><span class='line'>BEGIN_INSTRUMENT_SECTION
</span><span class='line'><span class="c">#插桩所有在文件loop_test.cpp中函数multiply内的循环</span>
</span><span class='line'>loops <span class="nv">file</span><span class="o">=</span><span class="s2">&quot;loop_test.cpp&quot;</span> <span class="nv">routine</span><span class="o">=</span><span class="s2">&quot;multiply&quot;</span>
</span><span class='line'><span class="c">#插入代码段</span>
</span><span class='line'>
</span><span class='line'><span class="nv">file</span> <span class="o">=</span> <span class="s2">&quot;line_test.cpp&quot;</span> <span class="nv">line</span> <span class="o">=</span> 9 <span class="nv">code</span> <span class="o">=</span> <span class="s2">&quot;printf(\&quot;i=%d: \&quot;, i);&quot;</span>
</span><span class='line'><span class="nb">exit </span><span class="nv">routine</span> <span class="o">=</span><span class="s2">&quot;int foo()&quot;</span> <span class="nv">code</span> <span class="o">=</span> <span class="s2">&quot;cout &lt;&lt;\&quot;exiting foo\&quot;&lt;&lt;endl;&quot;</span>
</span><span class='line'>entry <span class="nv">routine</span> <span class="o">=</span><span class="s2">&quot;int foo()&quot;</span> <span class="nv">code</span> <span class="o">=</span> <span class="s2">&quot;cout &lt;&lt;\&quot;entering foo\&quot;&lt;&lt;endl;i&quot;</span>
</span><span class='line'>END_INSTRUMENT_SECTION
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>使用PAPI测量更多指标，首先下指定使用papi参数编译的tau ，makefile，其次，使用环境变量PAPI_EVENT</p></li>
<li><p>当一次要采集多个指标时，可以通过设置COUNT &lt;1-25>来实现</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">COUNTER1</span><span class="o">=</span>P_WALL_CLOCK_TIME
</span><span class='line'><span class="nb">export </span><span class="nv">COUNTER2</span><span class="o">=</span>PAPI_L1_DCM
</span><span class='line'><span class="nb">export </span><span class="nv">COUNTER3</span><span class="o">=</span>PAPI_FP_INS
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>之后用paraprof –pack 命令打包结果成ppk，上传至数据库。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>paraprof --pack pdata.ppk
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[error while loading shared libraries: libjvm.so]]></title>
    <link href="http://luoyulong.github.io/blog/2013/12/14/oldblog/"/>
    <updated>2013-12-14T18:39:01+08:00</updated>
    <id>http://luoyulong.github.io/blog/2013/12/14/oldblog</id>
    <content type="html"><![CDATA[<h2>问题：</h2>

<p>一个开源项目依赖java的库，在配置编译时，一直报错error while loading shared libraries: libjvm.so</p>

<h2>解决方法：</h2>

<p>下面是找到解决方案</p>

<ul>
<li>cat /etc/ld.so.conf
发现里面 include ld.so.conf.d/*.conf</li>
<li>进入ld.so.conf.d文件夹，内容如下:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> atlas-x86_64.conf  python3.34lib.conf  xulrunner-64.conf
</span><span class='line'>  
</span><span class='line'>  kernel-2.6.32-279.el6.x86_64.conf  qt-x86_64.conf
</span><span class='line'>
</span><span class='line'>  mysql-x86_64.conf                  torque.conf
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>新建java.conf，添加libjvm.so的路径：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/jdk1.6/jre/lib/amd64/server
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>执行ldconfig,重新加载库</li>
<li>执行ldconfig -p |grep jvm，查看是否成功加载</li>
<li>发现之前添加的库在列表中后，问题解决。再次执行编译后的文件，就可以成功了，不再报上面的错误</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用gprofile收集性能数据]]></title>
    <link href="http://luoyulong.github.io/blog/2013/06/22/collect-performance-data-using-gprofile/"/>
    <updated>2013-06-22T16:23:10+08:00</updated>
    <id>http://luoyulong.github.io/blog/2013/06/22/collect-performance-data-using-gprofile</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Created</span> <span class="n">on</span> <span class="mi">2013</span><span class="o">-</span><span class="mi">6</span><span class="o">-</span><span class="mi">22</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@author</span><span class="p">:</span> <span class="n">luoyulong</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">filterFiles</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">exts</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">anyTrue</span><span class="p">(</span><span class="n">predicate</span><span class="p">,</span> <span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">(</span><span class="n">predicate</span><span class="p">,</span> <span class="n">sequence</span><span class="p">)</span>
</span><span class='line'>    <span class="n">r</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">fileName</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isdir</span><span class="p">(</span><span class="n">folder</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">fileName</span><span class="p">):</span>
</span><span class='line'>            <span class="n">filterFiles</span><span class="p">(</span><span class="n">folder</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">fileName</span><span class="p">,</span> <span class="n">exts</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">anyTrue</span><span class="p">(</span><span class="n">fileName</span><span class="o">.</span><span class="n">endswith</span><span class="p">,</span> <span class="n">exts</span><span class="p">):</span>
</span><span class='line'>                <span class="n">r</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">exts</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;.txt&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">funs</span> <span class="o">=</span><span class="p">[</span><span class="s">&#39;ICT::CMPM::UpdateStressCell&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">funs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;ICT::CMPM::EdgeMomentum&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">funs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;_ZN3ICT4CMPM13ComputingCellEPNS_3MPM    5CCellEb.clone.2&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">funs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;ICT::CMPM::EdgeMomentum&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">funs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;ICT::CMPM::UpdateMPV&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s">&quot;rm ./Result.txt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">files</span><span class="o">=</span><span class="n">filterFiles</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="n">exts</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">fun</span> <span class="ow">in</span> <span class="n">funs</span><span class="p">:</span>
</span><span class='line'>    <span class="n">records</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s">&quot;grep &quot;</span><span class="o">+</span><span class="n">fun</span><span class="o">+</span><span class="s">&quot; ./&quot;</span><span class="o">+</span><span class="nb">file</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>        <span class="n">x</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="n">y</span><span class="o">=</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">records</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s">&quot;echo &quot;</span><span class="o">+</span><span class="n">fun</span><span class="o">+</span><span class="s">&quot;&gt;&gt; Result.txt&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s">&quot;echo &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">records</span><span class="p">))</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="s">&quot;&gt;&gt; Result.txt&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">records</span><span class="p">:</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s">&quot;echo &quot;</span><span class="o">+</span><span class="n">r</span><span class="o">+</span><span class="s">&quot;&gt;&gt; Result.txt&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>
]]></content>
  </entry>
  
</feed>
