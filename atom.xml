<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[零露漙兮]]></title>
  <link href="http://luoyulong.github.io/atom.xml" rel="self"/>
  <link href="http://luoyulong.github.io/"/>
  <updated>2014-07-03T17:55:36+08:00</updated>
  <id>http://luoyulong.github.io/</id>
  <author>
    <name><![CDATA[luoyulong]]></name>
    <email><![CDATA[luoyulong@ncic.ac.cn]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CUDA 优化经验]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/03/gpuexperiences/"/>
    <updated>2014-07-03T17:45:10+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/03/gpuexperiences</id>
    <content type="html"><![CDATA[<h1>硬件模型</h1>

<ol>
<li><p>shared-memoy在硬件层是以SM为单位，在逻辑层是以block为单位</p></li>
<li><p>warp是GPU在硬件层的并行单位。一般来说，warp等于32. SM在处理一个block kernel时，会经可能多的发射warp，每个warp内线程的大小为32.</p></li>
<li><p><span id="anchor1"></span>每个SM可以同时驻留多个 block执行（active block），这主要取决于当前SM是否拥有足够的硬件资源，如Register，shared-memory等等.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p></li>
<li><p><a href="#anchor1">上一条</a>引出一个tradeoff，即越多的shared-memory会导致在同一SM上驻留的block减少，但同时其访存的性能会上升</p></li>
<li><p>在200机器上的GPU，每个SM拥有256*256个32位的寄存器（即平均每个线程有256个32-bite的寄存器），49152byte的shared memory,65536byte的constant memory。</p></li>
</ol>


<h1>优化原则</h1>

<ol>
<li><p>把部分无共享的shared-memory变为global memory， 并没有增加速度，推测是因为对shared-memory减少的还不够 不足以使得同时在SM运行的block增加。（已经验证）</p></li>
<li><p>有些常量经常被用到，且占用的空间很小。之前使用常量存储器，现改用参数传递，放入寄存器进行加速。</p></li>
<li><p>把与threadIdx无关的公共计算提到host端计算，再把结果使用参数传递给kernel函数</p></li>
<li><p>写回的变量不使用shared-memory</p></li>
</ol>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>详见http://stackoverflow.com/questions/12212003/how-concurrent-blocks-can-run-a-single-gpu-streaming-multiprocessor/12213137#12213137<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[论文写作经验]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/03/paperwritting/"/>
    <updated>2014-07-03T09:28:32+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/03/paperwritting</id>
    <content type="html"><![CDATA[<h2>对reviewer的误区</h2>

<h3>Reviewers will carefully read my paper ? <strong>Totally wrong!</strong></h3>

<ul>
<li>A reviewer often has a pile of papers to review</li>
<li>A reviewer typically makes up his/her mind after 5-minute browsing <strong><em>title/author->abstract->conclusions->references &ndash;>introduction</em></strong>, then spends &lt; 1h to justify (moving to main body of the paper)</li>
</ul>


<h3>Your action:</h3>

<ul>
<li>make your points <strong><em>EARLY</em></strong></li>
<li>bring up your results <strong><em>QUICK</em></strong></li>
<li>highlight your contributions <strong><em>FAST</em></strong></li>
<li>make your paper easy to read, clear to follow, and good to learn</li>
</ul>


<h2>Component of a paper</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[英语写作 句子]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/02/englishwriting/"/>
    <updated>2014-07-02T21:57:54+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/02/englishwriting</id>
    <content type="html"><![CDATA[<h1>句子</h1>

<ul>
<li>xxxx,to the best of our knowledge,not been previously studied and is now more compelling than ever</li>
<li>While a large body of work exists on DRAM in laboratory conditions, little has been reported on real DRAM failures in large production clusters.</li>
<li>with extremely low energy footprints, all within acceptable area bounds
Failures are costly in terms of &hellip;</li>
<li>To our knowledge, these are the first performance results of a shortest path problem on realistic graph instances in the order of billions of vertices and edges.[1]</li>
<li>In this work, our focus is to attack the dual problems of increasing power consumption and latency for DRAM devices</li>
<li>These observations have the potential to open up new avenues for architecture research.</li>
<li>In terms of xxx &mdash;&ndash; 对于xxx方面</li>
<li>To the best of our knowledge this is the first proposed scheme that &hellip;
reads have no option but to wait at the memory controller.</li>
<li>Guard against forgetting &mdash;-防止XXXX</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CUDA 计时的方法]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/02/cuda-timing/"/>
    <updated>2014-07-02T15:04:09+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/02/cuda-timing</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>测试CUDA应用的时间</p>

<h1>解决方案</h1>

<p>引用自stackoverflow：</p>

<blockquote><p>You could do sth along the lines of :</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cuda'><span class='line'><span class="cp">#include&lt;sys/time.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">timeval</span> <span class="n">t1</span><span class="p">,</span> <span class="n">t2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">kernel_call</span><span class="o">&lt;&lt;&lt;</span><span class="n">dimGrid</span><span class="p">,</span> <span class="n">dimBlock</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">HANDLE_ERROR</span><span class="p">(</span><span class="n">cudaThreadSynchronize</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="n">time</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1000000.0</span><span class="o">*</span><span class="p">(</span><span class="n">t2</span><span class="p">.</span><span class="n">tv_sec</span><span class="o">-</span><span class="n">t1</span><span class="p">.</span><span class="n">tv_sec</span><span class="p">)</span> <span class="o">+</span> <span class="n">t2</span><span class="p">.</span><span class="n">tv_usec</span><span class="o">-</span><span class="n">t1</span><span class="p">.</span><span class="n">tv_usec</span><span class="p">)</span><span class="o">/</span><span class="mf">1000000.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Time to generate:  %3.1f ms </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>or:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cuda'><span class='line'><span class="kt">float</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'><span class="n">cudaEvent_t</span> <span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">HANDLE_ERROR</span><span class="p">(</span> <span class="n">cudaEventCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">start</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">HANDLE_ERROR</span><span class="p">(</span> <span class="n">cudaEventCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stop</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">HANDLE_ERROR</span><span class="p">(</span> <span class="n">cudaEventRecord</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">kernel_call</span><span class="o">&lt;&lt;&lt;</span><span class="n">dimGrid</span><span class="p">,</span> <span class="n">dimBlock</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">HANDLE_ERROR</span><span class="p">(</span> <span class="n">cudaEventRecord</span><span class="p">(</span><span class="n">stop</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">HANDLE_ERROR</span><span class="p">(</span> <span class="n">cudaEventSynchronize</span><span class="p">(</span><span class="n">stop</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">HANDLE_ERROR</span><span class="p">(</span> <span class="n">cudaEventElapsedTime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">time</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Time to generate:  %3.1f ms </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，在cpu端计时，由于GPU的kenernl与cpu是异步执行，所以在获得整个cuda应用的结束时间前，必须要调用cudaThreadSynchronize（现替换成cudaDeviceSynchronize），否则测的时间是最后一个kernel 启动的时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROSE 在源文件的include语句之前插入语句]]></title>
    <link href="http://luoyulong.github.io/blog/2014/07/01/rose-insertstatementbeforeheader/"/>
    <updated>2014-07-01T11:50:40+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/07/01/rose-insertstatementbeforeheader</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>今天，在使用ROSE自动生成CUDA代码时，遇到一个问题：程序中需要使用纹理存储器对GPU访存进行加速，相应地要生成texture变量声明的代码。由于texture初始化时使用到一个宏，该宏定义在文件头部，这就使得texture的初始化必须在宏定义之后。翻遍了手册，找不到把语句插入preprocessinfo 结点（include，#define ）之后的方法，于是退一步打算找到当前scope中第一个语句，然后插到该语句之后。本打算调用firststatement的方法，报错，并且scope中的statement并不全是源码中的语句，会包含一些头文件中的结点。</p>

<h1>解决方法</h1>

<p>通过比较scope和scope中语句的名字，找到当前源文件中第一个SgStatement</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'> <span class="c1">//find the first statement of current source file</span>
</span><span class='line'>  <span class="n">SgStatement</span><span class="o">*</span> <span class="n">firststatement</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SgStatementPtrList</span> <span class="n">statelist</span><span class="o">=</span><span class="n">currentscope</span><span class="o">-&gt;</span><span class="n">generateStatementList</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">statelist</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="n">SgStatement</span><span class="o">*</span> <span class="n">tmp</span><span class="o">=</span><span class="n">statelist</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">get_file_info</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">get_filenameString</span><span class="p">()</span><span class="o">==</span><span class="n">currentscope</span><span class="o">-&gt;</span><span class="n">get_file_info</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">get_filenameString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="n">firststatement</span><span class="o">=</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>                                                                     <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[检测Linux下 ODBC是否配置成功]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/30/linuxodbc/"/>
    <updated>2014-06-30T21:48:21+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/30/linuxodbc</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>测试ODBC安装是否成功</p>

<h1>解决方案</h1>

<p>使用isql测试数据源是否配置正确</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># dbname:the username of target database</span>
</span><span class='line'><span class="c"># dbpsw: the password of target database</span>
</span><span class='line'>imysql -v datasourcename dbname dbpsw
</span></code></pre></td></tr></table></div></figure>


<p>如果数据源配置正确，会出现进入数据库</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROSE 编程要点]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/30/roseimportant/"/>
    <updated>2014-06-30T15:10:56+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/30/roseimportant</id>
    <content type="html"><![CDATA[<ul>
<li>SgName的输出要使用getString方法，而不能使用unparseToCompleteString</li>
<li>在创建AST node变量时，子节点要使用deepCopy进行深度拷贝，防止一个node在语法树中被多次引用；若在编程中不小心出现这种情况，可以通过打印dot图观察依赖关系，从而找到修改被多次引用的node。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROSE 声明CUDA类型的变量]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/30/rose-cuda-varialbe/"/>
    <updated>2014-06-30T10:26:12+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/30/rose-cuda-varialbe</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>需要声明CUDA类型的变量，如 constant,device,shared等等</p>

<h1>解决方案</h1>

<p>调用<code>get_declarationModifier().get_storageModifier().set</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROSE 创建模板类变量的一个取巧办法]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/30/rose-create-template-variable/"/>
    <updated>2014-06-30T09:42:36+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/30/rose-create-template-variable</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>用ROSE产生cuda代码时，为了性能需要，使用到了纹理存储器。但在纹理存储器变量声明的时候，遇到了点问题：纹理寄存器变量的类型是模板类实例，e.g,<code>texture&lt;DATATYPE,1,cudaReadModeElementType&gt; t_a</code>,但是rose中模板类变量貌似不怎么好声明，尝试了半天都没有成功。</p>

<h1>解决方案</h1>

<p>使用万金油式的buildOpaqueType直接创建模板类型,然后使用该类型创建纹理存储器变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//create a template instance type directly: texture&lt;DATATYPE,1,cudaReadModelElementType&gt;</span>
</span><span class='line'><span class="n">SgType</span><span class="o">*</span> <span class="n">textureType</span><span class="o">=</span><span class="n">buildOpaqueType</span><span class="p">(</span><span class="s">&quot;texture&lt;DATATYPE,1,cudaReadModelElementType&gt;&quot;</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">get_scope</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//create the texture type variable &quot;texture_a&quot;</span>
</span><span class='line'><span class="n">SgVariableDeclaration</span><span class="o">*</span> <span class="n">vdecl</span><span class="o">=</span><span class="n">buildVariableDeclaration</span><span class="p">(</span><span class="s">&quot;texture_a&quot;</span><span class="p">,</span><span class="n">textureType</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">get_scope</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[error: no instance of overloaded function "tex1Dfetch" matches the argument list argument types are: (texture<double, 1, cudaReadModeElementType>, int)  ]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/29/cudatexture/"/>
    <updated>2014-06-29T15:59:52+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/29/cudatexture</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>在使用cuda的纹理存储器时，编译器报错</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>stencilexample.cu<span class="o">(</span>147<span class="o">)</span>: error:
</span><span class='line'>no instance of overloaded <span class="k">function</span> <span class="s2">&quot;tex1Dfetch&quot;</span>
</span><span class='line'>matches the argument list argument types are:
</span><span class='line'><span class="o">(</span>texture&lt;double, 1, cudaReadModeElementType&gt;, int<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>解决方法</h1>

<p>经过研究，发现原来cuda的纹理存储器不能直接支持double</p>

<blockquote><p>The type of a texel, which is restricted to the basic integer and single-precision floating-point types and any of the 1-, 2-, and 4-component vector types defined in char, short, int, long, longlong, float, double that are derived from the basic integer and single-precision floating-point types.
出处：<a href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#texture-and-surface-memory" title="Title">cuda-c-programming-guide</a></p></blockquote>

<p>非要加速的话，可以使用一个int2类型的向量拼接成一个double</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cuda'><span class='line'><span class="c1">//declarate the texture using int2 type</span>
</span><span class='line'><span class="n">texture</span> <span class="o">&lt;</span><span class="kt">int2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">cudaReadModeElementType</span><span class="o">&gt;</span> <span class="n">Atex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//used in global function(cuda kernel)</span>
</span><span class='line'><span class="kt">int2</span> <span class="n">A1</span><span class="o">=</span><span class="n">tex1Dfetch</span><span class="p">(</span><span class="n">Atex</span><span class="p">,(</span><span class="n">texoff</span><span class="o">+</span><span class="p">(</span><span class="n">ll</span><span class="o">+</span><span class="n">offset</span><span class="p">)</span> <span class="o">*</span><span class="n">lda</span> <span class="o">+</span><span class="n">ty</span><span class="o">+</span><span class="n">offset</span><span class="p">));</span>
</span><span class='line'><span class="n">Bs</span><span class="p">[</span><span class="n">ty</span><span class="o">+</span><span class="n">offset</span><span class="p">][</span><span class="n">tx</span><span class="p">]</span> <span class="o">-=</span> <span class="n">__hiloint2double</span><span class="p">(</span><span class="n">A1</span><span class="p">.</span><span class="n">y</span><span class="p">,</span><span class="n">A1</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">temp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R 字符操作函数]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/24/r-string-manipulate/"/>
    <updated>2014-06-24T09:20:29+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/24/r-string-manipulate</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th> 函数     </th>
<th>   描述    </th>
</tr>
</thead>
<tbody>
<tr>
<td>nchar(x)  </td>
<td> 计算x中的字符数量</td>
</tr>
<tr>
<td>substr(x, start, stop)</td>
<td>   字符串截取 </td>
</tr>
<tr>
<td>grep(pattern, x)   </td>
<td>  字符串内的查找 </td>
</tr>
<tr>
<td>paste(&hellip;, sep = &ldquo; &rdquo;, collapse = NULL)</td>
<td>字符串连接</td>
</tr>
<tr>
<td>strsplit(x, split)</td>
<td>字符串分割</td>
</tr>
<tr>
<td>tolower() </td>
<td> 把x变成小写</td>
</tr>
<tr>
<td>toupper(x)</td>
<td>把x变成大写</td>
</tr>
<tr>
<td>casefold(x, upper = FALSE)</td>
<td>通过指定upper,把x变成大写或者小写</td>
</tr>
<tr>
<td>chartr(old, new, x)</td>
<td>把x中每个在old中出现的字符翻译成new中相应位置的字符 </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言 使用循环构建dataframe]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/23/raddcolumnbyloop/"/>
    <updated>2014-06-23T15:31:06+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/23/raddcolumnbyloop</id>
    <content type="html"><![CDATA[<ul>
<li>目前有个模块需要动态的确定dataframe的属性和值，属性和值以key=value的形式存在一个str 的list中，使用如下函数循环构建dataframe</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> for(item in dataItems)
</span><span class='line'>  {
</span><span class='line'>    itempair &lt;- unlist(strsplit(item, "="))
</span><span class='line'>    eval(parse(text=sprintf("%s=itempair[2]",itempair[1])))
</span><span class='line'>    if(datadf_str!="")
</span><span class='line'>      datadf_str=paste(datadf_str,itempair[1],sep=",")
</span><span class='line'>    else
</span><span class='line'>      datadf_str=itempair[1]
</span><span class='line'>    print(datadf_str)
</span><span class='line'>  }
</span><span class='line'>  datadf=eval(parse(text=sprintf("data.frame(%s)",datadf_str)))</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言 变量]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/19/r-language-variable/"/>
    <updated>2014-06-19T09:54:51+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/19/r-language-variable</id>
    <content type="html"><![CDATA[<h2>对全局变量的赋值</h2>

<ol>
<li> 在函数外部：

<ul>
<li>global_variable&lt;-newvalue</li>
<li>global_variable=newvalue</li>
</ul>
</li>
<li> 在函数内部：

<ul>
<li>global_variable&lt;&lt;-newvalue</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言 行与列的操作]]></title>
    <link href="http://luoyulong.github.io/blog/2014/06/19/r-hangg-yu-lie-de-cao-zuo/"/>
    <updated>2014-06-19T09:43:53+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/06/19/r-hangg-yu-lie-de-cao-zuo</id>
    <content type="html"><![CDATA[<h2>选择列</h2>

<h3>数据框/dataframe:</h3>

<h4>引用：</h4>

<ul>
<li>dn、d[,n]、d&#8221;name&#8221;、d[,&ldquo;name&rdquo;]、d$name 得到某一列组成的矢量。</li>
<li>d[n]、d[&ldquo;name&rdquo;] 得到某一列组成的数据框。</li>
<li>d[c(m,n,&hellip;)]、d[,c(m,n,&hellip;)]、d[,c(&ldquo;name1&rdquo;,&ldquo;name2&rdquo;,&hellip;)]得到若干列组成的数据框。

<h4>其它技巧：</h4></li>
<li>负号表示剔除。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  allnames=names(rawdata)
</span><span class='line'>  vnames=c("OptType","OptConfig","Gflops")
</span><span class='line'>  vnames2=allnames %in% vnames
</span><span class='line'>  snames=allnames[!vnames2]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>可以用 grep() 搜索变量名。比如
<code>mydata[grep("^q", names(mydata))]</code>
选择名称以“q”开头的数据列。</li>
</ul>


<h3>列表/List：</h3>

<h4>list列的引用</h4>

<ul>
<li>d[[&ldquo;colname&rdquo;]] 得到成分名为colname的列矢量</li>
</ul>


<h2>选择行</h2>

<h3>数据框：</h3>

<h4>引用：</h4>

<ul>
<li>d[n,] 得到某一行组成的数据框。</li>
<li>d[c(m,n,&hellip;),n] 得到若干行组成的数据框。</li>
<li>head() 得到前6行组成的数据框。</li>
<li>tail() 得到最后6行组成的数据框。</li>
</ul>


<h4>条件引用。例如：</h4>

<ul>
<li>d[d$y>8,] 得到d中满足y>8的行组成的数据框。</li>
<li>d$x[d$y>8] 得到d中满足y>8的行的列x组成的矢量。</li>
</ul>


<h4>数据框行的遍历</h4>

<ul>
<li>使用索引进行遍历</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for(i in 1:nrow(rawdata))
</span><span class='line'>  dosomething(rawdata[i,])</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Rose Problem:  SgNode::get_numberOfTraversalSuccessors(): Assertion 'false' failed]]></title>
    <link href="http://luoyulong.github.io/blog/2014/03/30/roseproblem/"/>
    <updated>2014-03-30T21:30:45+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/03/30/roseproblem</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Internal error<span class="o">(</span>!<span class="o">)</span>: called tree traversal mechanism <span class="k">for </span>illegal object:
</span><span class='line'>static: SgNode
</span><span class='line'>dynamic:  SgNode
</span><span class='line'>Aborting ...
</span><span class='line'>my_program: Cxx_GrammarTreeTraversalSuccessorContainer.C:42: virtual
</span><span class='line'>size_t SgNode::get_numberOfTraversalSuccessors<span class="o">()</span>: Assertion <span class="sb">`</span><span class="nb">false</span><span class="err">&#39;</span> failed.
</span></code></pre></td></tr></table></div></figure>


<h2>解决方法</h2>

<p>这种错误一般是由于语法树具有环路造成的。造成环路的原因一般是因为一个astnode被多次使用，解决方法是利用deepcopy在多次使用的地方克隆。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Miktex+ Texmarker/Texstudio环境的配置  ]]></title>
    <link href="http://luoyulong.github.io/blog/2014/03/13/miktex-plus-texmarker-texstudio-enviroment-setup/"/>
    <updated>2014-03-13T10:37:02+08:00</updated>
    <id>http://luoyulong.github.io/blog/2014/03/13/miktex-plus-texmarker-texstudio-enviroment-setup</id>
    <content type="html"><![CDATA[<h2>步骤</h2>

<ul>
<li><p>下载miktex移植版本：
<a href="http://miktex.org/download">http://miktex.org/download</a></p></li>
<li><p>解压</p></li>
<li><p>设置系统环境变量PATH。例如：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PATH</span><span class="o">=</span>E:<span class="se">\P</span>rogram Files<span class="se">\m</span>iktex-portable<span class="se">\m</span>iktex<span class="se">\b</span>in
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装Texmarker/Texstudio，即可运行</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TAU 中的profile和trace]]></title>
    <link href="http://luoyulong.github.io/blog/2013/12/19/tau/"/>
    <updated>2013-12-19T20:51:00+08:00</updated>
    <id>http://luoyulong.github.io/blog/2013/12/19/tau</id>
    <content type="html"><![CDATA[<h2>预备知识</h2>

<ul>
<li><p>profile侧重结果，trace侧重过程。</p></li>
<li><p>对于两个不同类型的测试（profile or trace），需要指定不同的makefile文件，各类makefile文件在tau编译配置时根据参数指定生成。</p></li>
</ul>


<h2>自动化插桩的过程：</h2>

<ul>
<li><p>添加或者设需要的makefile</p></li>
<li><p>根据待插桩的源码，设置相应的tau编译器（可在makefile中替换或者直接使用tau编译器编译）</p></li>
</ul>


<h3>例子：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#设置tau makefile</span>
</span><span class='line'><span class="nb">export </span><span class="nv">TAU_MAKEFILE</span><span class="o">=</span>/home/xxxx/tools/tau_TRACE_PAPIWALLCLOCK/x86_64/lib/Makefile.tau-papi-pdt-trace
</span><span class='line'>
</span><span class='line'><span class="c">#设置插桩参数</span>
</span><span class='line'><span class="nb">export </span><span class="nv">TAU_THROTTLE</span><span class="o">=</span>0
</span><span class='line'><span class="nb">export </span><span class="nv">COUNTER1</span><span class="o">=</span>P_WALL_CLOCK_TIME
</span><span class='line'><span class="nb">export </span><span class="nv">COUNTER2</span><span class="o">=</span>PAPI_L1_DCM
</span><span class='line'><span class="nb">export </span><span class="nv">COUNTER3</span><span class="o">=</span>PAPI_FP_INS
</span><span class='line'>
</span><span class='line'><span class="c">#调用tau编译器</span>
</span><span class='line'>tau_f90.sh  -c  hps_em_comp.f90
</span><span class='line'>tau_cxx.sh  main.cpp  hps_em_comp.o -o mytest
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>此外，进一步的详细插桩可以通过在编译时指定配置文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tau_f90.sh -tau_options<span class="o">=</span>-optTauSelectFile<span class="o">=</span>ins_file -c  hps_em_comp.f90
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置文件格式如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#Tell tau to not profile these functions</span>
</span><span class='line'>BEGIN_EXCLUDE_LIST
</span><span class='line'>double* get<span class="o">(</span>int size<span class="o">)</span>
</span><span class='line'>END_EXCLUDE_LIST
</span><span class='line'>
</span><span class='line'><span class="c">#Exclude these files from profiling</span>
</span><span class='line'>
</span><span class='line'>BEGIN_FILE_EXCLUDE_LIST
</span><span class='line'>*.so
</span><span class='line'>END_FILE_EXCLUDE_LIST
</span><span class='line'>
</span><span class='line'>BEGIN_INSTRUMENT_SECTION
</span><span class='line'><span class="c">#插桩所有在文件loop_test.cpp中函数multiply内的循环</span>
</span><span class='line'>loops <span class="nv">file</span><span class="o">=</span><span class="s2">&quot;loop_test.cpp&quot;</span> <span class="nv">routine</span><span class="o">=</span><span class="s2">&quot;multiply&quot;</span>
</span><span class='line'><span class="c">#插入代码段</span>
</span><span class='line'>
</span><span class='line'><span class="nv">file</span> <span class="o">=</span> <span class="s2">&quot;line_test.cpp&quot;</span> <span class="nv">line</span> <span class="o">=</span> 9 <span class="nv">code</span> <span class="o">=</span> <span class="s2">&quot;printf(\&quot;i=%d: \&quot;, i);&quot;</span>
</span><span class='line'><span class="nb">exit </span><span class="nv">routine</span> <span class="o">=</span><span class="s2">&quot;int foo()&quot;</span> <span class="nv">code</span> <span class="o">=</span> <span class="s2">&quot;cout &lt;&lt;\&quot;exiting foo\&quot;&lt;&lt;endl;&quot;</span>
</span><span class='line'>entry <span class="nv">routine</span> <span class="o">=</span><span class="s2">&quot;int foo()&quot;</span> <span class="nv">code</span> <span class="o">=</span> <span class="s2">&quot;cout &lt;&lt;\&quot;entering foo\&quot;&lt;&lt;endl;i&quot;</span>
</span><span class='line'>END_INSTRUMENT_SECTION
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>使用PAPI测量更多指标，首先下指定使用papi参数编译的tau ，makefile，其次，使用环境变量PAPI_EVENT</p></li>
<li><p>当一次要采集多个指标时，可以通过设置COUNT &lt;1-25>来实现</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">COUNTER1</span><span class="o">=</span>P_WALL_CLOCK_TIME
</span><span class='line'><span class="nb">export </span><span class="nv">COUNTER2</span><span class="o">=</span>PAPI_L1_DCM
</span><span class='line'><span class="nb">export </span><span class="nv">COUNTER3</span><span class="o">=</span>PAPI_FP_INS
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>之后用paraprof –pack 命令打包结果成ppk，上传至数据库。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>paraprof --pack pdata.ppk
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[error while loading shared libraries: libjvm.so]]></title>
    <link href="http://luoyulong.github.io/blog/2013/12/14/oldblog/"/>
    <updated>2013-12-14T18:39:01+08:00</updated>
    <id>http://luoyulong.github.io/blog/2013/12/14/oldblog</id>
    <content type="html"><![CDATA[<h2>问题：</h2>

<p>一个开源项目依赖java的库，在配置编译时，一直报错error while loading shared libraries: libjvm.so</p>

<h2>解决方法：</h2>

<p>下面是找到解决方案</p>

<ul>
<li>cat /etc/ld.so.conf
发现里面 include ld.so.conf.d/*.conf</li>
<li>进入ld.so.conf.d文件夹，内容如下:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> atlas-x86_64.conf  python3.34lib.conf  xulrunner-64.conf
</span><span class='line'>  
</span><span class='line'>  kernel-2.6.32-279.el6.x86_64.conf  qt-x86_64.conf
</span><span class='line'>
</span><span class='line'>  mysql-x86_64.conf                  torque.conf
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>新建java.conf，添加libjvm.so的路径：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/jdk1.6/jre/lib/amd64/server
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>执行ldconfig,重新加载库</li>
<li>执行ldconfig -p |grep jvm，查看是否成功加载</li>
<li>发现之前添加的库在列表中后，问题解决。再次执行编译后的文件，就可以成功了，不再报上面的错误</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用gprofile收集性能数据]]></title>
    <link href="http://luoyulong.github.io/blog/2013/06/22/collect-performance-data-using-gprofile/"/>
    <updated>2013-06-22T16:23:10+08:00</updated>
    <id>http://luoyulong.github.io/blog/2013/06/22/collect-performance-data-using-gprofile</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Created</span> <span class="n">on</span> <span class="mi">2013</span><span class="o">-</span><span class="mi">6</span><span class="o">-</span><span class="mi">22</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@author</span><span class="p">:</span> <span class="n">luoyulong</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">filterFiles</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">exts</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">anyTrue</span><span class="p">(</span><span class="n">predicate</span><span class="p">,</span> <span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">(</span><span class="n">predicate</span><span class="p">,</span> <span class="n">sequence</span><span class="p">)</span>
</span><span class='line'>    <span class="n">r</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">fileName</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isdir</span><span class="p">(</span><span class="n">folder</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">fileName</span><span class="p">):</span>
</span><span class='line'>            <span class="n">filterFiles</span><span class="p">(</span><span class="n">folder</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">fileName</span><span class="p">,</span> <span class="n">exts</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">anyTrue</span><span class="p">(</span><span class="n">fileName</span><span class="o">.</span><span class="n">endswith</span><span class="p">,</span> <span class="n">exts</span><span class="p">):</span>
</span><span class='line'>                <span class="n">r</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">exts</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;.txt&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">funs</span> <span class="o">=</span><span class="p">[</span><span class="s">&#39;ICT::CMPM::UpdateStressCell&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">funs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;ICT::CMPM::EdgeMomentum&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">funs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;_ZN3ICT4CMPM13ComputingCellEPNS_3MPM    5CCellEb.clone.2&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">funs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;ICT::CMPM::EdgeMomentum&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">funs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;ICT::CMPM::UpdateMPV&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s">&quot;rm ./Result.txt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">files</span><span class="o">=</span><span class="n">filterFiles</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="n">exts</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">fun</span> <span class="ow">in</span> <span class="n">funs</span><span class="p">:</span>
</span><span class='line'>    <span class="n">records</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s">&quot;grep &quot;</span><span class="o">+</span><span class="n">fun</span><span class="o">+</span><span class="s">&quot; ./&quot;</span><span class="o">+</span><span class="nb">file</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>        <span class="n">x</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="n">y</span><span class="o">=</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">records</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s">&quot;echo &quot;</span><span class="o">+</span><span class="n">fun</span><span class="o">+</span><span class="s">&quot;&gt;&gt; Result.txt&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s">&quot;echo &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">records</span><span class="p">))</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="s">&quot;&gt;&gt; Result.txt&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">records</span><span class="p">:</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s">&quot;echo &quot;</span><span class="o">+</span><span class="n">r</span><span class="o">+</span><span class="s">&quot;&gt;&gt; Result.txt&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[英语作文中常用替换高级词汇]]></title>
    <link href="http://luoyulong.github.io/blog/2012/12/20/%E5%86%99%E4%BD%9C%E8%AF%8D%E6%B1%87%E6%94%B6%E9%9B%86/"/>
    <updated>2012-12-20T16:07:51+08:00</updated>
    <id>http://luoyulong.github.io/blog/2012/12/20/写作词汇收集</id>
    <content type="html"><![CDATA[<h2>（一）</h2>

<h3>形容词.</h3>

<ol>
<li>贫穷的. poor = needy = impoverished = poverty-stricken</li>
<li>富裕的. rich = wealthy = affluent = well-to-do = well-off</li>
<li>优秀的. excellent = eminent = top = outstanding</li>
<li>积极的，好的. good = conducive = beneficial=advantageous</li>
<li>消极的，不良的. bad = detrimental= baneful =undesirable</li>
<li>明显的. obvious = apparent = evident =manifest</li>
<li>健康的.  healthy = robust = sound = wholesome</li>
<li>惊人的. surprising = amazing = extraordinary = miraculous</li>
<li>美丽的. beautiful = attractive = gorgeous = eye-catching</li>
<li> 有活力的. energetic = dynamic = vigorous =animated</li>
<li> 流行的.  popular = prevailing = prevalent= pervasive</li>
</ol>


<h3>动词.</h3>

<ol>
<li>提高，加强. improve = enhance= promote = strengthen = optimize</li>
<li>引起. cause = trigger = endanger</li>
<li>解决. solve =resolve =address = tackle =cope with = deal with</li>
<li>拆除. destroy = tear down = knock down = eradicate</li>
<li>培养.  develop = cultivate = foster = nurture</li>
<li>激发，鼓励. encourage = motivate = stimulate = spur</li>
<li>认为.  think = assert= hold = claim = argue</li>
<li>完成. complete = fulfill = accomplish= achieve</li>
<li>保留. keep = preserve = retain = hold</li>
<li> 有害于. destroy = impair = undermine = jeopardize</li>
<li> 减轻.  ease = alleviate = relieve = lighten</li>
</ol>


<h3>名词.</h3>

<ol>
<li>影响. influence= impact</li>
<li>危险. danger = perils =hazard</li>
<li>污染. pollution = contamination</li>
<li>人类. human beings= mankind = human race</li>
<li>老人.  old people= the old = the elderly = the aged = senior citizens</li>
<li>幸福. happiness = cheerfulness = well-being</li>
<li>老师. teachers = instructors = educators = lecturers</li>
<li>教育. education = schooling = family parenting = upbringing</li>
<li>青少年. young people = youngsters = youths = adolescents</li>
<li> 优点. advantage = merits = superiority = virtue</li>
<li> 责任.  responsibility = obligation = duty = liability</li>
<li> 能力.  ability = capacity = power = skill</li>
<li> 职业.  job = career = employment = profession</li>
<li> 娱乐.  enjoyment = pastimes = recreation= entertainment</li>
<li> 孩子.  children = offspring = descendant= kid</li>
</ol>


<h3>短语.</h3>

<ol>
<li>充满了. be filled with = be awash with = be inundate with = be saturated with</li>
<li>努力. struggle for = aspire after = strive for = spare no efforts for</li>
<li>从事.  embark on = take up = set about = go in for</li>
<li>在当代.  in contemporary society = in present-day society= in this day and age</li>
<li>大量的.  a host of = a multitude of = a vast number of = a vast amount of</li>
</ol>


<h2>（二）</h2>

<ol>
<li>individuals,characters, folks替换(people ,persons)</li>
<li>positive, favorable, rosy (美好的)，promising(有希望的)，perfect, pleasurable , excellent, outstanding, superior替换good</li>
<li>dreadful, unfavorable, poor, adverse, ill (有害的)替换bad,
如果bad做表语，可以有be less impressive替换
eg.  An army of college students indulge themselves in playing games, enjoying romance with girls/boys or killing time passively in their dorms.  When it approaches to graduation, as a result, they find their academic records are less impressive.</li>
<li>(an army of, an ocean of, a sea of, a multitude of ,a host of, many, if not most)替换many.
注. 用many, if not most 一定要小心，many后一定要有词。
Eg.  Many individuals, if not most, harbor the idea that….
同理 用most, if not all,替换most.</li>
<li>a slice of, quiet a few , several替换some</li>
<li>harbor the idea that, take the attitude that, hold the view that,
it is widely shared that,
it is universally acknowledged that)替think(因为是书面语，所以要加that)</li>
<li>affair ,business ,matter 替换thing</li>
<li>shared 代 common</li>
<li>reap huge fruits 替换get many benefits )</li>
<li> for my part ,from my own perspective 替换 in my opinion</li>
<li> Increasing(ly),growing 替换more and more
( 注意没有growingly这种形式。所以当修饰名词时用increasing/growing. 修饰形容词，副词用increasingly.
Eg.  sth has gained growing popularity.
Sth is increasingly popular with the advancement of sth.</li>
<li> little if anything, 或little or nothing替换hardly</li>
<li> beneficial, rewarding替换helpful,</li>
<li> shopper,client,consumer,purchaser, 替换customer</li>
<li> exceedingly,extremely, intensely 替换very</li>
<li> hardly necessary, hardly inevitable &hellip;  替换 unnecessary, avoidable</li>
<li> sth appeals to sb, sth exerts a tremendous fascination on sb
替换sb take interest in / sb.  be interested in</li>
<li> capture one&rsquo;s attention替换attract one&rsquo;s attention.</li>
<li> facet,demension,sphere代aspect</li>
<li> be indicative of ,be suggestive of ,be fearful of代 indicate, suggest ,fear</li>
<li> give rise to, lead to, result in, trigger 替换cause.</li>
<li> There are several reasons behind sth 替换. . reasons for sth</li>
<li> desire 替换want.</li>
<li> pour attention into 替换pay attention to</li>
<li> bear in mind that 替换remember</li>
<li> enjoy, possess 替换have(注意process是过程的意思)</li>
<li> interaction替换communication</li>
<li> frown on sth替换 be against , disagree with sth</li>
<li> to name only a few, as an example替换 for example, for instance</li>
<li> next to / virtually impossible,替换nearly / almost impossible</li>
</ol>


<h2>（三）</h2>

<ol>
<li> accelerate.  后面接名词，表示“加速”，中性词，好事坏事都能用。</li>
<li> adequate.  “足够的”，用来替代经常被使用的enough。</li>
<li> advance.  名词，“进步，发展”，用来替代文章开头经常使用的development，progress。</li>
<li> advisable / sensible / rational.  “合理的”，都可以替代reasonable。</li>
<li> cannot afford to.  “不应当做”，不是我们说的“负担不起”。</li>
<li> be alert to something.  “对…保持警惕”，后面接消极概念。</li>
<li> alternative.  “其他的选择或办法”，比如an alternative is that… 就相当于in addition（除此 之外）了。</li>
<li> applicable / feasible / workable.  都表示“可行的”，用在政策、法令、手段等词前面做修饰语，既可增加字长，又可以提高词汇水平。</li>
<li>  approach / channel.  “方法，手段”，用来替代我们经常使用的一些简单词汇，如method  等等。</li>
<li>  approve of something.  “批准，同意”，注意不要忘记介词of。</li>
<li>  attach importance to something.  表示“重视，强调”，替代pay attention to。</li>
<li>  ban / prohibit something.  “禁止，杜绝”，表达这个含义时尽量不要使用stop。</li>
<li>  barrier / obstacle / impediment.  “障碍、阻碍”，名词，在写作考试中经常被用到。</li>
<li>  capital / fund.  解决社会问题时一般都会提到需要投资，可以用到这两个单词，替代money。  Finance 金融 financial</li>
<li>  challenging.  “困难，有难度”，用来替代difficult。</li>
<li>  in such circumstances.  “在这类情况下”，写作时用于总结某个内容。17.   considerable.  “相当大，相当多的”，非常常用的修饰语，
比如considerable changes就是相当大的变化。</li>
<li>  in contrast.  “相反”，用来替代我们经常使用的on the contrary，on the other hand。</li>
<li>  conversely.  “相反地”，也可以用来替代on the contrary，on the other hand。</li>
<li>  copy / repeat one’s experience / success.  “借鉴别人的经验，成功经验”。</li>
<li>  critical.  “至关重要的”，用于替代已经被用滥的important。</li>
<li>  currently.  “目前”，用来替代now，nowadays。</li>
<li>  damage.  作为名词，含义是“损失、损失金额”，动词“损坏”的搭配能力非常强，和表示物品或抽象概念的词都可以放在一起使用，因此可以用来替代destroy。</li>
<li>  decline.  “衰退”，表示数字下降得比较缓慢，在图表作文中根据图表曲线的实际情况使用，替代我们使用的普通单词decrease。</li>
<li>  defect.  “缺点，不足”，用来替代“shortcoming”。 (www. yingyuzuowen. com)</li>
<li>  demonstrate / illustrate.  “说明，表明”，用在图表作文中替代show，reveal等单词。</li>
<li>  depict / portray.  “描述，描绘”，在漫画作文中替代describe。</li>
<li>  deteriorate.  “恶化”，用于替代get bad或get worse。</li>
<li>  devise.  “设计，指定”，后面可以接表示方法手段的内容。</li>
<li>  discard / abandon.  “放弃，抛弃”，用于表达放弃消极想法或做法。</li>
<li>  dispute.  “争端，冲突”，用来替代problem，argument。79.    progress.  “发展，进步”，可以同advance交替使用，以避免重复，并可以替代
    development。</li>
<li>   a range of / a series of / a string of.  “一系列”，特别是后两个单词通常都可以用在消极概念前边，可以用作修饰语，增加文章长度。</li>
<li>   relieve.  “减轻，缓解”，用于消极概念前，
词组为relieve somebody of something“消除某人的…。</li>
<li>   soar.  “迅速上升”，用于图表作文。</li>
<li>   strongly recommend that somebody should do something.  “强烈要求，建议”，这个词的语气其实很强。</li>
<li>   remain.  “一直处于某状态”，后面一般使用形容词。</li>
<li>   remedy.  “补救措施，解决办法”，用于替代solution。</li>
<li>   resolve difference.  “消除分歧，差异”，常用写作词组。</li>
<li>   rewarding.  “有收效，有回报的”，用在方法手段或政策法规的内容上。</li>
<li>   shrink.  过去式和过去分词为shrank，shrunk，“缩小，减少”，用来替代我们经常使用的decrease。</li>
<li>   slight / slightly.  “稍微，有点”，这个词可以在我们写作文时做修饰语，比如slight  difference或drop slightly，起到增加字长和提高单词水平的作用。</li>
<li>   strategy.  “策略”，其实也就是“方法手段”的含义，自然就可以替代method，way等单词。</li>
<li>   strengthen.  “加强，巩固，改善”，同improve交替使用，以避免重复。</li>
<li>   sufficient.  “足够的”，用在资金，资源等单词前做修饰语，替代enough。</li>
<li>   system.  这个词的搭配能力非常强，比如educational system, legal system, economic  system等等，只要形容词后面加上这个词，其实就成了形容词本身可以变化的名词，上面三个例子就可以理解为教育，法律或者经济。</li>
<li>   threaten.  “威胁到，危及”，后面接诸如环境，发展，进步等单词。</li>
<li>   traditionally.  “过去”，用于替代in the past。</li>
<li>   when it comes to something.  “当我们谈到…时”，用于文章开头。</li>
</ol>


<h2>（四）</h2>

<ol>
<li>individuals,characters, folks替换(people ,persons)</li>
<li>positive, favorable, rosy (美好的)，promising(有希望的)，
perfect, pleasurable , excellent, outstanding, superior替换good</li>
<li>dreadful, unfavorable, poor, adverse, ill (有害的)替换bad
如果bad做表语，可以有be less impressive替换
eg.   An army of college students indulge themselves in playing games, enjoying romance with girls/boys or killing time passively in their dorms.  When it approaches to graduation,as a result, they find their academic records are less impressive.</li>
<li>(an army of, an ocean of, a sea of, a multitude of ,
a host of, many, if not most)替换many.<br/>
注. 用many, if not most 一定要小心，many后一定要有词。
Eg.  Many individuals, if not most, harbor the idea that….
同理 用most, if not all ,替换most.</li>
<li>a slice of, quiet a few , several替换some</li>
<li>harbor the idea that, take the attitude that,
hold the view that, it is widely shared that,
it is universally acknowledged that)替think  (因为是书面语，所以要加that)</li>
<li>affair ,business ,matter 替换thing</li>
<li>shared 代 common</li>
<li>reap huge fruits 替换get many benefits )</li>
<li> for my part ,from my own perspective 替换 in my opinion</li>
<li> Increasing(ly),growing 替换more and more( 注意没有growingly这种形式。
所以当修饰名词时用increasing/growing. 修饰形容词，副词用increasingly.
Eg.  sth has gained growing popularity.
Sth is increasingly popular with the advancement of sth.</li>
<li> little if anything, 或little or nothing替换hardly</li>
<li> beneficial, rewarding替换helpful,</li>
<li> shopper,client,consumer,purchaser, 替换customer</li>
<li> exceedingly,extremely, intensely 替换very</li>
<li> hardly necessary, hardly inevitable &hellip;  替换 unnecessary, avoidable</li>
<li> sth appeals to sb, sth exerts a tremendous fascination on sb
替换sb take interest in / sb.  be interested in</li>
<li> capture one&rsquo;s attention替换attract one&rsquo;s attention.</li>
<li> facet,demension,sphere代aspect</li>
<li> indicative of ,be suggestive of ,be fearful of代 indicate, suggest ,fear</li>
<li> give rise to, lead to, result in, trigger 替换cause.</li>
<li> There are several reasons behind sth 替换. . reasons for sth</li>
<li> desire 替换want.</li>
<li> pour attention into 替换pay attention to</li>
<li> bear in mind that 替换remember</li>
<li> enjoy, possess 替换have(注意process是过程的意思)</li>
<li> interaction替换communication</li>
<li> frown on sth替换 be against , disagree with sth</li>
<li> to name only a few, as an example替换 for example, for instance</li>
<li> next to / virtually impossible,替换nearly / almost impossible</li>
</ol>


<h2>（五）</h2>

<ol>
<li> 因果
naturally, as a result, consequently, not surprisingly, quite understandably, predictably, presumably,
contribute to, result in , the result can be identified in…, ascribe … to . . , attribute … to…, derive from. . , spring from, arise from,</li>
<li> 递进</li>
<li>in addition to that, besides, apart from, let alone, not to mention, quite conscious of, moreover,</li>
<li> 并列
Coupled with, combined with, going hand in hand with，integrated with…, entwined with. . ,</li>
<li>转折
It is, however, nevertheless, in spite of , regardless of, unaware of，for all that …, heedless of . . , nonetheless,</li>
<li> . 常见得分词汇替换表
（冒号前面的是我们习惯想到的词，考试中尽量少用！一定要用俺给你推荐的后面的词去替换前面的哈！mengest!）
We, everyone.  any reasonable/sensitive soul/mind, talented minds, elite minds, versatile minds, personality, figures, celebrity, idiots, philosophic minds, genius
More and more.  increasingly,
Big.  enormous, tremendous, gigantic, titanic, astronomical, vast, boundless,
Very.  extremely, overwhelmingly, undeniably, remarkably, voluminously, excessively, exceedingly, tangibly, impressively, shockingly,
Famous.  renowned, celebrated, accomplished, distinguished, prominent, eminent, outstanding, preeminent,
Good.  spectacular, amazing, unbelievable, incredible, magnificent, adorable, fantastic, fascinating, admirable, respectable, cherishable, adorable, awesome, terrific, majestic,
Bad.  nightmarish, disgusting, despicable, monstrous, appalling, abhorring, repelling, repulsive,
Important.  significant, essential, basic, fundamental, indispensable, crucial, critical, decisive, determinant, dominant, predominant, infallible,
Say, Believe，think.  suppose, hold, claim, maintain, presume, assume, contend, argue, declare, I am convinced, conclude,
Improve, better.  further, promote, enhance, reinforce, strengthen, consolidate, cement, nurture, relieve, recover,</li>
<li> drop.  “下降”，用来替代decrease。这个词表示下降比较快，如果再用修饰语，应当是sharply，dramatically，drastically。这三个单词一般都用在消极的单词上。
积极的用greatly。</li>
<li>  eliminate.  “消除”，用于写作与社会消极问题有关的文章。</li>
<li>  emerge as.  “逐渐崛起并成为”，这个词组虽然很短，但是含义非常复杂，可以用在文章的开头，表达某种事物或社会现象从无到有，并迅速传播。比如 Internet has emerged as an indispensable channel for people to exchange information。</li>
<li>  employ.  “采纳，采用”，与表示“观点，方法，政策，法令”等英语单词搭配使用，用来替代adopt。</li>
<li>  enforce.  “执行”法律法规，通常用于作文结束部分，对某个社会问题提出解决办法时使用。</li>
<li>  essential.  “至关重要，核心的”，形容词，用来替代important。</li>
<li>  It is generally established that.  “众所周知，公认”。</li>
<li> when the situation is reversed.  “相反”，用来替代on the contrary。</li>
<li>  excessive.  “过度的”，这个词在表达消极概念时都可以做修饰语，副词形式
   excessively，比如tap“开发”，就可以说tap something excessively。</li>
<li>  exchange.  这个词才是文化，教育等方面的“交流”，而不是communication。</li>
<li>  expand.  “扩大”，后面接影响，范围一类的词汇。</li>
<li>  facet / factor.  “方面，因素”，写作时尽量避免使用element，这个词中国人用得不是很好，aspect因为用的人较多，也可以避免。</li>
<li>  fail to do.  “没有能够”，可以适当替换带有cannot的句子。</li>
<li>  frequently.  “经常”，替代often，表示发生频率很高。</li>
<li>  fresh / novel.  “新的”，比如fresh idea等，都可以用来替代我们经常使用的new。</li>
<li>  fulfill.  “完成，取得”，记住以下词组，fulfill the task, fulfill the dream, fulfill the role。</li>
<li>  give priority to something.  “重视，优先考虑”。</li>
<li>  give rise to something.  “引发，导致…的出现”，积极消极概念都可以使用。</li>
<li>  given that.  “由于…原因”，可以用在句子的开始位置，后面接完整的句子，相当于 because。</li>
<li>  greatly / remarkably.  “非常，相当”，作为褒义词，可以用在表示上升、前进、发展等积极含义的单词前面加强程度。</li>
<li>  guard against.  “留心、警惕”，后面使用名词型结构。</li>
<li>  household.  “家庭”，这个词偏重的家庭生活中的设备，物质概念，因此，比如计算机，汽车等设备进入家庭，就应当用enter the household，而不是我们用的home或family。生活垃圾也可以表达为household wastes。</li>
<li>  be ignorant about something.  “对…没有引起足够重视”，表示没有意识到。</li>
<li>  incidence.  “不良事件”，比如incidence of pollution，incidence of fake commodity等等，表示出现上述不良情况。</li>
<li>  increasingly.  “越来越”，副词，可以用在动词和形容词前面，加深程度。</li>
<li>  indispensable.  “不可缺少的，必须的”，写作时可以用来做很多名词的修饰语。</li>
<li>  individualistic / selfish / self-centered.  都是“自私的”含义，可以交替使用。</li>
<li>  inspire / stimulate.  “鼓励”，替代encourage。</li>
<li>  for instance.  “例如”，虽然这个词组我们经常见到，但很少有人在写作文时用它来替代for example。</li>
<li>  instruct.  “教育”，名词形式为instruction，同educate，education交替使用。</li>
<li>  intend to do.  “计划，打算”，可以替代be going to等词组，表达做事的意愿。</li>
<li>  make investment into.  “投资，投入”，投资是解决社会问题的一个核心方式，因此这个词组在英语写作中经常会用到。</li>
<li>  issue.  “问题”，中性词，我们平常使用的problem是贬义词，因此比如网络问题等词组都应当用issue来表达。</li>
<li>  launch a campaign to do something.  “大力开展…活动”。</li>
<li>  maintain.  “一贯认为，坚持认为”，一般写成somebody maintains that，后面使用完整的句子，用来替代think, believe。</li>
<li>  major.  “主要的”，用来替代main。</li>
<li>  major / primary concern.  “主要关注点”，名词，
要说something is somebody’s major concern。</li>
<li>  misleading.  “误导的，错误的”，替代wrong。</li>
<li>  observe.  “遵守”，后面接名词，如法律法规等。</li>
<li>  be out of / be short of.  “耗尽”/“短缺”，用来替代lack，同时提醒大家lack这个词的动词形式在英语中使用的很少。</li>
<li>  outlook.  “前景，未来”，用来替代future。当然，如果用future，就可以加个修饰语，比如foreseeable future等等。</li>
<li>  plummet / slump.  “急剧下降”，图表作文中使用较多。</li>
<li>  popularize.  “推广，普及”，很常用的单词，后面接知识，道理，方法，法律法规等各种词汇。</li>
<li>  possess.  “拥有”，用于替代have，既可以表示拥有具体事物，也可以说拥有抽象品质，特征。</li>
<li>  poverty-stricken.  “贫困的，低收入的”，替代poor。</li>
<li>  practice.  “（广泛，大范围）的从事”，常与laws and regulations, policy或其他类似范畴的单词连用，用来替代carry out。</li>
<li>  profit.  “好处”，这个词本来是指经济上的利润，但现在可以用来替代benefit，表示广义的好处。
Everyone knows.  it’s a truth universally acknowledged that,
It can never be denied,
it is undeniable that
It goes without saying that
It is self evident that
It is highly advisably, imperative, remarkable that
It comforts one to know that…</li>
<li>顶尖副词.
Excessively, unbelievably, shockingly, reasonably, logically, tremendously, remarkably, noticeably, tangibly, perceptibly, hopefully, incredibly, amazingly, fundamentally, excessively, extremely, overwhelmingly, sharply, dramatically, drastically, justifiably, convincingly, ignorantly, fantastically, hardly, barely, sparsely, surprisingly, unexpectedly,</li>
<li>列举事例段落常见的开头语.
The case/ story of XXX stands as an undisputed confirmation of …. . that…
XXX remains a solid evidence of ….
Adding further credibility/plausibility to the argument is the story of XXX
My conviction stands on the following three…</li>
</ol>


<h3>动词替换.</h3>

<ol>
<li>Improve 提高.
Promote.  促进AC之间的贸易promote the trade between A and C; He was promoted to senior manager in this company.
Advance.  our understanding of human genetics has considerably(非常的，可换做vastly) advanced.
Enhance.  the publicity has enhanced his reputation. 这次宣传提高了他的名望</li>
<li>change 改变.
Transform. 多指改头换面，完全改变，不能用于形容slight change。说到人口变化. the increasing population has transformed the landscape and structure of local industry structure. 人口剧增改变了小镇的景色以及当地的工业结构</li>
<li>Emphasize 强调.
Highlight. the report highlight the decline in the numbers of native(可以换作local) plants and insects.
Stress.  He stresses the need for parents to listen to their children.
Accentuate.  the crisis accentuates the gap between rich and poor.
(highlight and emphasize 的区别. highlight是告诉人们重点，因而能够让别人注意，类似于老师勾重点；而emphasize则是使重点清晰，不管别人是否能注意得到。而stress则和emphasize差不多)</li>
<li> Develop培养.
Cultivate.  cultivate the ability of … ；培养情操；cultivate a more relaxed and positive way towards life.
Nurture.  养育，同样可以指培养人才（talents）the sea nutures ample marine animals.</li>
<li> Break 破坏.
Impair. impair ability; 主要是破坏能力，莫乱用。
Undermine这个词也是指的是抽象意义上的破坏，有逐渐削弱之意，重点是循序渐进的过程。Undermine one’s ability/confidence/authority/position/credibility
Jeopardize.  不能乱用，破坏的东西要上一定的等级才能配上此词。比如Jeopardize the process of peace. 破坏和平进程
Devastate特指毁灭、蹂躏 the earthquake devastated the whole city.</li>
<li> Keep 保存
Preserve、Conserve 保护资源用的就是这个词，不要用protect，protect这个词用在保护具体的东西。</li>
<li> deal With解决
Tackle.  tackle the problem.
Resolve.  resolve dispute争论/conflict冲突/problem/issue/crisis危机；来自拉丁语，比较正式。</li>
<li> need 需要
Require. xxx requires courage and confidence.
Necessitate.  用法不简单，没有摸透。
call for（这也是个很高级的用法，奥巴马就用这个【我不晓得奥巴马咋个用的，原帖是这样说的，并且call for也挺正式的】）. 跟need一样的用法</li>
</ol>


<h3>形容词替换.</h3>

<ol>
<li> Everywhere 普遍的
Widespread.  随便用
Prevalent. Drug abuse is especially prevalent among teenagers.
Overflow. 泛滥 the garden is overflew with colors of flowers.
Rampant.  特指有害的东西泛滥，比如疾病，犯罪等，并且难于控制。H1n1 Virus is rampant in the world. 甲流世界泛滥</li>
<li> Good 好的（太多了）
Impressive, glorious, amazing, brilliant, incredible, attractive…
Beneficial（反义词. detrimental）the drug is beneficial to the immune system.
Advantageous.  特指有益的。Advantageous industry. 优势产业</li>
<li> Harmful 有害的
Unfavorable, horrible, disgusting
Inhumane.  没人性的
lousy (I’m fed up with the lousy job. )
severe (severe problem, illness, injuries. )
abysmal(低谷. their performance is abysmal. )
Detrimental.  smoking is detrimental to your health.
Baneful.  现阶段用不到，文学作品里面的“邪恶”，完全诘屈聱牙。</li>
<li> Rich 富有的
Wealthy、Affluent、ample
There are a myriad of stars in the Milky Way.  (银河系好多星星啊！！)</li>
<li>Poor 贫穷的
Impoverished（动词表示使贫穷.  The great depression had impoverished many third world countries. ）an impoverished student.</li>
<li>Serious 严重的
Severe</li>
<li>Obvious 明显的
Manifest.  a manifest error judge明显判断失误; Adv.  Manifestly . e. g.  a manifestly unfair system.
Apparent、Evident
Patent.  patent impossibilities.  显然不可能的事。</li>
<li>cheap 便宜的
Economical. 经济的，不浪费，而不是单纯指某物便宜。经济适用房. economically affordable housing。
Inexpensive=cheap
Reasonable. 价格合理的。Reasonable price
Affordable. 能够支付的。
名词替换.</li>
<li>Forefather 祖先
Ancestor、Predecessor</li>
<li>Difference不同
Gap（简单但是牛）沟，generation gap——very common use in CET-4/6
Distinction.  sharp/clear distinction between allergy and food intolerance (TBBT里面的Howard就有lactose intolerance，一吃peanuts就会肿，长荨麻疹rash哈哈。)
再想牛就用schism。比如“填平两个分支学科之间的分歧”heal the schism between clinical medicine and public health. (有本书就叫这个。)</li>
<li>Crime 犯罪
Delinquency. 一般crime都用不到。指道德败坏，违法行为，为显示词汇量可以与crime连用
Criminal Act. 犯罪行为</li>
<li>Environment 环境
Circumstance. under the circumstances.  相当抽象的词，“情况”。
Surrounding. 表示周围居住的环境，想当具体。Nearby可与之互换。The surrounding area.
Atmosphere、Ambience. 这两个词可替换，但是当atmosphere表示大气层的意思的时候则不能。</li>
<li>Pollution 污染
Contamination.  我觉得太装B了，他的pp还不错. contaminated water—特指被污染的水</li>
<li>Human 人类
Individual/men/ones/以及一切表示工人，农民公务员等等的词
The human race
Humankind
Humanity. 特别指出，用来表示人性。其他一概不要用。虽然也有人之类的意思。</li>
<li>Danger 危险
Hazard. 化学、物理危害；隐患. polluted water is a hazard to wild life and nature；safety/nature hazard.</li>
<li> modern society 在当今社会
In contemporary society
In present-day society
In  this day and age（这是最牛的说法）</li>
</ol>

]]></content>
  </entry>
  
</feed>
